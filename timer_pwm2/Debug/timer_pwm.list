
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003818  08003818  00004818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080038c8  080038c8  000048c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000008  080038cc  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  20000014  080038d8  00005014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  080038d8  00005080  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dff2  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fe8  00000000  00000000  00013036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001428  00000000  00000000  00015020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000f65  00000000  00000000  00016448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020908  00000000  00000000  000173ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f79d  00000000  00000000  00037cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d698b  00000000  00000000  00047452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0011dddd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000054e4  00000000  00000000  0011de20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  00123304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003800 	.word	0x08003800

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003800 	.word	0x08003800

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 fada 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f83c 	bl	8000234 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001bc:	f000 f890 	bl	80002e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f924 	bl	800040c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001c4:	f000 f8aa 	bl	800031c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001c8:	2100      	movs	r1, #0
 80001ca:	4819      	ldr	r0, [pc, #100]	@ (8000230 <main+0x80>)
 80001cc:	f002 fc24 	bl	8002a18 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* USER CODE END WHILE */
		/* 10 kHz with 50% duty cycle */
		set_pwm_frequency_duty(10000, 50);
 80001d0:	2132      	movs	r1, #50	@ 0x32
 80001d2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80001d6:	f000 f941 	bl	800045c <set_pwm_frequency_duty>
		HAL_Delay(3000);
 80001da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001de:	f000 fb4b 	bl	8000878 <HAL_Delay>

		/* 20 kHz with 33% duty cycle */
		set_pwm_frequency_duty(20000, 33);
 80001e2:	2121      	movs	r1, #33	@ 0x21
 80001e4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80001e8:	f000 f938 	bl	800045c <set_pwm_frequency_duty>
		HAL_Delay(3000);
 80001ec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001f0:	f000 fb42 	bl	8000878 <HAL_Delay>

		/* 1 kHz with 70% duty cycle */
		set_pwm_frequency_duty(1000, 70);
 80001f4:	2146      	movs	r1, #70	@ 0x46
 80001f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001fa:	f000 f92f 	bl	800045c <set_pwm_frequency_duty>
		HAL_Delay(3000);
 80001fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000202:	f000 fb39 	bl	8000878 <HAL_Delay>

		/* 33 kHz with 65% duty cycle */
		set_pwm_frequency_duty(33000, 65);
 8000206:	2141      	movs	r1, #65	@ 0x41
 8000208:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800020c:	f000 f926 	bl	800045c <set_pwm_frequency_duty>
		HAL_Delay(3000);
 8000210:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000214:	f000 fb30 	bl	8000878 <HAL_Delay>

		/* 27 kHz with 27% duty cycle */
		set_pwm_frequency_duty(27000, 27);
 8000218:	211b      	movs	r1, #27
 800021a:	f646 1078 	movw	r0, #27000	@ 0x6978
 800021e:	f000 f91d 	bl	800045c <set_pwm_frequency_duty>
		HAL_Delay(3000);
 8000222:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000226:	f000 fb27 	bl	8000878 <HAL_Delay>
  {
 800022a:	bf00      	nop
 800022c:	e7d0      	b.n	80001d0 <main+0x20>
 800022e:	bf00      	nop
 8000230:	20000030 	.word	0x20000030

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b09a      	sub	sp, #104	@ 0x68
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0320 	add.w	r3, r7, #32
 800023e:	2248      	movs	r2, #72	@ 0x48
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fab0 	bl	80037a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025a:	4b20      	ldr	r3, [pc, #128]	@ (80002dc <SystemClock_Config+0xa8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000262:	4a1e      	ldr	r2, [pc, #120]	@ (80002dc <SystemClock_Config+0xa8>)
 8000264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	4b1c      	ldr	r3, [pc, #112]	@ (80002dc <SystemClock_Config+0xa8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000276:	2303      	movs	r3, #3
 8000278:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2340      	movs	r3, #64	@ 0x40
 8000288:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800028a:	2300      	movs	r3, #0
 800028c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0320 	add.w	r3, r7, #32
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f8fc 	bl	8001490 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 f931 	bl	8000504 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002a2:	236f      	movs	r3, #111	@ 0x6f
 80002a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a6:	2301      	movs	r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80002b6:	2380      	movs	r3, #128	@ 0x80
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fc58 	bl	8001b78 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002ce:	f000 f919 	bl	8000504 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3768      	adds	r7, #104	@ 0x68
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	58000400 	.word	0x58000400

080002e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b094      	sub	sp, #80	@ 0x50
 80002e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002e6:	463b      	mov	r3, r7
 80002e8:	2250      	movs	r2, #80	@ 0x50
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f003 fa5b 	bl	80037a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002f6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002f8:	2300      	movs	r3, #0
 80002fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000300:	463b      	mov	r3, r7
 8000302:	4618      	mov	r0, r3
 8000304:	f002 f849 	bl	800239a <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800030e:	f000 f8f9 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000312:	bf00      	nop
 8000314:	3750      	adds	r7, #80	@ 0x50
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08e      	sub	sp, #56	@ 0x38
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	f107 031c 	add.w	r3, r7, #28
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]
 800034a:	615a      	str	r2, [r3, #20]
 800034c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800034e:	4b2e      	ldr	r3, [pc, #184]	@ (8000408 <MX_TIM2_Init+0xec>)
 8000350:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000354:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000356:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <MX_TIM2_Init+0xec>)
 8000358:	2201      	movs	r2, #1
 800035a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035c:	4b2a      	ldr	r3, [pc, #168]	@ (8000408 <MX_TIM2_Init+0xec>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000362:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <MX_TIM2_Init+0xec>)
 8000364:	f240 321f 	movw	r2, #799	@ 0x31f
 8000368:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036a:	4b27      	ldr	r3, [pc, #156]	@ (8000408 <MX_TIM2_Init+0xec>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000370:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <MX_TIM2_Init+0xec>)
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000376:	4824      	ldr	r0, [pc, #144]	@ (8000408 <MX_TIM2_Init+0xec>)
 8000378:	f002 fa96 	bl	80028a8 <HAL_TIM_Base_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000382:	f000 f8bf 	bl	8000504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800038a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800038c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000390:	4619      	mov	r1, r3
 8000392:	481d      	ldr	r0, [pc, #116]	@ (8000408 <MX_TIM2_Init+0xec>)
 8000394:	f002 fd2e 	bl	8002df4 <HAL_TIM_ConfigClockSource>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800039e:	f000 f8b1 	bl	8000504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003a2:	4819      	ldr	r0, [pc, #100]	@ (8000408 <MX_TIM2_Init+0xec>)
 80003a4:	f002 fad7 	bl	8002956 <HAL_TIM_PWM_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003ae:	f000 f8a9 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ba:	f107 031c 	add.w	r3, r7, #28
 80003be:	4619      	mov	r1, r3
 80003c0:	4811      	ldr	r0, [pc, #68]	@ (8000408 <MX_TIM2_Init+0xec>)
 80003c2:	f003 f991 	bl	80036e8 <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003cc:	f000 f89a 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d0:	2360      	movs	r3, #96	@ 0x60
 80003d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 400;
 80003d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80003d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e2:	463b      	mov	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	4619      	mov	r1, r3
 80003e8:	4807      	ldr	r0, [pc, #28]	@ (8000408 <MX_TIM2_Init+0xec>)
 80003ea:	f002 fbef 	bl	8002bcc <HAL_TIM_PWM_ConfigChannel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80003f4:	f000 f886 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003f8:	4803      	ldr	r0, [pc, #12]	@ (8000408 <MX_TIM2_Init+0xec>)
 80003fa:	f000 f8d2 	bl	80005a2 <HAL_TIM_MspPostInit>

}
 80003fe:	bf00      	nop
 8000400:	3738      	adds	r7, #56	@ 0x38
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000030 	.word	0x20000030

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	2001      	movs	r0, #1
 8000422:	f7ff feab 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	2002      	movs	r0, #2
 8000428:	f7ff fea8 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2120      	movs	r1, #32
 8000430:	4809      	ldr	r0, [pc, #36]	@ (8000458 <MX_GPIO_Init+0x4c>)
 8000432:	f000 fc99 	bl	8000d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000436:	2320      	movs	r3, #32
 8000438:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	4803      	ldr	r0, [pc, #12]	@ (8000458 <MX_GPIO_Init+0x4c>)
 800044c:	f000 fb1c 	bl	8000a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000450:	bf00      	nop
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	48000400 	.word	0x48000400

0800045c <set_pwm_frequency_duty>:

/* USER CODE BEGIN 4 */
void set_pwm_frequency_duty(uint32_t frequency, uint8_t duty_percent)
{
 800045c:	b480      	push	{r7}
 800045e:	b087      	sub	sp, #28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
  uint32_t timer_clock = 16000000; /* 16 MHz system clock */
 8000468:	4b23      	ldr	r3, [pc, #140]	@ (80004f8 <set_pwm_frequency_duty+0x9c>)
 800046a:	617b      	str	r3, [r7, #20]
  uint32_t prescaler = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
  uint32_t period = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  uint32_t pulse = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]

  /* For low frequencies, use higher prescaler to maintain resolution */
  if (frequency <= 1000) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800047e:	d808      	bhi.n	8000492 <set_pwm_frequency_duty+0x36>
    prescaler = 15; /* Use prescaler of 16 */
 8000480:	230f      	movs	r3, #15
 8000482:	613b      	str	r3, [r7, #16]
    timer_clock = timer_clock / (prescaler + 1);
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	3301      	adds	r3, #1
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	fbb2 f3f3 	udiv	r3, r2, r3
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	e00c      	b.n	80004ac <set_pwm_frequency_duty+0x50>
  }
  else if (frequency <= 10000) {
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000498:	4293      	cmp	r3, r2
 800049a:	d807      	bhi.n	80004ac <set_pwm_frequency_duty+0x50>
    prescaler = 1; /* Use prescaler of 2 */
 800049c:	2301      	movs	r3, #1
 800049e:	613b      	str	r3, [r7, #16]
    timer_clock = timer_clock / (prescaler + 1);
 80004a0:	693b      	ldr	r3, [r7, #16]
 80004a2:	3301      	adds	r3, #1
 80004a4:	697a      	ldr	r2, [r7, #20]
 80004a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004aa:	617b      	str	r3, [r7, #20]
  }

  /* Calculate period (ARR) value */
  period = (timer_clock / frequency) - 1;
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b4:	3b01      	subs	r3, #1
 80004b6:	60fb      	str	r3, [r7, #12]

  /* Calculate pulse (CCR) value based on duty cycle */
  pulse = ((period + 1) * duty_percent) / 100;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3301      	adds	r3, #1
 80004bc:	78fa      	ldrb	r2, [r7, #3]
 80004be:	fb02 f303 	mul.w	r3, r2, r3
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <set_pwm_frequency_duty+0xa0>)
 80004c4:	fba2 2303 	umull	r2, r3, r2, r3
 80004c8:	095b      	lsrs	r3, r3, #5
 80004ca:	60bb      	str	r3, [r7, #8]

  /* Apply calculated values */
  __HAL_TIM_SET_PRESCALER(&htim2, prescaler);
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <set_pwm_frequency_duty+0xa4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <set_pwm_frequency_duty+0xa4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004dc:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <set_pwm_frequency_duty+0xa4>)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 80004e2:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <set_pwm_frequency_duty+0xa4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004ea:	bf00      	nop
 80004ec:	371c      	adds	r7, #28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	00f42400 	.word	0x00f42400
 80004fc:	51eb851f 	.word	0x51eb851f
 8000500:	20000030 	.word	0x20000030

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <LL_AHB2_GRP1_EnableClock>:
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800051e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000542:	b480      	push	{r7}
 8000544:	b085      	sub	sp, #20
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800054a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800054e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800055a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000592:	d102      	bne.n	800059a <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff ffd4 	bl	8000542 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b088      	sub	sp, #32
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005c2:	d113      	bne.n	80005ec <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff ffa3 	bl	8000510 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ca:	2301      	movs	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005da:	2301      	movs	r3, #1
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f000 fa4e 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <NMI_Handler+0x4>

080005fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <MemManage_Handler+0x4>

0800060c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <UsageFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f8e9 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000658:	4b24      	ldr	r3, [pc, #144]	@ (80006ec <SystemInit+0x98>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800065e:	4a23      	ldr	r2, [pc, #140]	@ (80006ec <SystemInit+0x98>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800067c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000680:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <SystemInit+0x9c>)
 800068e:	4013      	ands	r3, r2
 8000690:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800069a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800069e:	f023 0305 	bic.w	r3, r3, #5
 80006a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80006a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80006ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006b2:	f023 0301 	bic.w	r3, r3, #1
 80006b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80006ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006be:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <SystemInit+0xa0>)
 80006c0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80006c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006c6:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <SystemInit+0xa0>)
 80006c8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	faf6fefb 	.word	0xfaf6fefb
 80006f4:	22041000 	.word	0x22041000

080006f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80006f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fc:	3304      	adds	r3, #4

080006fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000700:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000702:	d3f9      	bcc.n	80006f8 <CopyDataInit>
  bx lr
 8000704:	4770      	bx	lr

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000706:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000708:	3004      	adds	r0, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800070a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>
  bx lr
 800070e:	4770      	bx	lr

08000710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000714:	f7ff ff9e 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <LoopForever+0x6>)
 800071a:	490c      	ldr	r1, [pc, #48]	@ (800074c <LoopForever+0xa>)
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <LoopForever+0xe>)
 800071e:	2300      	movs	r3, #0
 8000720:	f7ff ffed 	bl	80006fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <LoopForever+0x12>)
 8000726:	490c      	ldr	r1, [pc, #48]	@ (8000758 <LoopForever+0x16>)
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <LoopForever+0x1a>)
 800072a:	2300      	movs	r3, #0
 800072c:	f7ff ffe7 	bl	80006fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000730:	480b      	ldr	r0, [pc, #44]	@ (8000760 <LoopForever+0x1e>)
 8000732:	490c      	ldr	r1, [pc, #48]	@ (8000764 <LoopForever+0x22>)
 8000734:	2300      	movs	r3, #0
 8000736:	f7ff ffe8 	bl	800070a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073a:	f003 f83d 	bl	80037b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800073e:	f7ff fd37 	bl	80001b0 <main>

08000742 <LoopForever>:

LoopForever:
  b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   r0, =_estack
 8000744:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000748:	20000008 	.word	0x20000008
 800074c:	20000014 	.word	0x20000014
 8000750:	080038cc 	.word	0x080038cc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000754:	20030000 	.word	0x20030000
 8000758:	20030000 	.word	0x20030000
 800075c:	080038d8 	.word	0x080038d8
  INIT_BSS _sbss, _ebss
 8000760:	20000014 	.word	0x20000014
 8000764:	20000080 	.word	0x20000080

08000768 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_IRQHandler>
	...

0800076c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <HAL_Init+0x3c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <HAL_Init+0x3c>)
 800077c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000780:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000782:	2003      	movs	r0, #3
 8000784:	f000 f94e 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f80f 	bl	80007ac <HAL_InitTick>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	e001      	b.n	800079e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800079a:	f7ff feeb 	bl	8000574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800079e:	79fb      	ldrb	r3, [r7, #7]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58004000 	.word	0x58004000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <HAL_InitTick+0x6c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d024      	beq.n	800080a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007c0:	f001 fb86 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <HAL_InitTick+0x6c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f948 	bl	8000a6e <HAL_SYSTICK_Config>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10f      	bne.n	8000804 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b0f      	cmp	r3, #15
 80007e8:	d809      	bhi.n	80007fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ea:	2200      	movs	r2, #0
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295
 80007f2:	f000 f922 	bl	8000a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f6:	4a09      	ldr	r2, [pc, #36]	@ (800081c <HAL_InitTick+0x70>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e007      	b.n	800080e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e004      	b.n	800080e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e001      	b.n	800080e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000010 	.word	0x20000010
 800081c:	2000000c 	.word	0x2000000c

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_IncTick+0x20>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_IncTick+0x24>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <HAL_IncTick+0x24>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000010 	.word	0x20000010
 8000844:	2000007c 	.word	0x2000007c

08000848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b03      	ldr	r3, [pc, #12]	@ (800085c <HAL_GetTick+0x14>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000007c 	.word	0x2000007c

08000860 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000864:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <HAL_GetTickPrio+0x14>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2000000c 	.word	0x2000000c

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff ffe2 	bl	8000848 <HAL_GetTick>
 8000884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_Delay+0x44>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089e:	bf00      	nop
 80008a0:	f7ff ffd2 	bl	8000848 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000010 	.word	0x20000010

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	@ (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	@ (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	@ 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	@ 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff47 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb2 	bl	80009e0 <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	e14c      	b.n	8000d32 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 813e 	beq.w	8000d2c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d005      	beq.n	8000ac8 <HAL_GPIO_Init+0x40>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d130      	bne.n	8000b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000afe:	2201      	movs	r2, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	f003 0201 	and.w	r2, r3, #1
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d017      	beq.n	8000b66 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d123      	bne.n	8000bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	08da      	lsrs	r2, r3, #3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	691a      	ldr	r2, [r3, #16]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	08da      	lsrs	r2, r3, #3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	6939      	ldr	r1, [r7, #16]
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0203 	and.w	r2, r3, #3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8098 	beq.w	8000d2c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfc:	4a54      	ldr	r2, [pc, #336]	@ (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c26:	d019      	beq.n	8000c5c <HAL_GPIO_Init+0x1d4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1d0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a49      	ldr	r2, [pc, #292]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1cc>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a48      	ldr	r2, [pc, #288]	@ (8000d5c <HAL_GPIO_Init+0x2d4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1c8>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a47      	ldr	r2, [pc, #284]	@ (8000d60 <HAL_GPIO_Init+0x2d8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1c4>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e008      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e004      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	f002 0203 	and.w	r2, r2, #3
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	4093      	lsls	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c6e:	4938      	ldr	r1, [pc, #224]	@ (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c7c:	4b39      	ldr	r3, [pc, #228]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca0:	4a30      	ldr	r2, [pc, #192]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cca:	4a26      	ldr	r2, [pc, #152]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cd0:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d24:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f47f aeab 	bne.w	8000a98 <HAL_GPIO_Init+0x10>
  }
}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000c00 	.word	0x48000c00
 8000d60:	48001000 	.word	0x48001000
 8000d64:	58000800 	.word	0x58000800

08000d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
 8000d74:	4613      	mov	r3, r2
 8000d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d78:	787b      	ldrb	r3, [r7, #1]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	58000400 	.word	0x58000400

08000db8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	58000400 	.word	0x58000400

08000dd4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000de6:	d101      	bne.n	8000dec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e46:	d101      	bne.n	8000e4c <LL_RCC_HSE_IsReady+0x18>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <LL_RCC_HSE_IsReady+0x1a>
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ea6:	d101      	bne.n	8000eac <LL_RCC_HSI_IsReady+0x18>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <LL_RCC_HSI_IsReady+0x1a>
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	061b      	lsls	r3, r3, #24
 8000ece:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	604b      	str	r3, [r1, #4]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d101      	bne.n	8000f3e <LL_RCC_HSI48_IsReady+0x18>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <LL_RCC_HSI48_IsReady+0x1a>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d101      	bne.n	8000fea <LL_RCC_LSE_IsReady+0x18>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <LL_RCC_LSE_IsReady+0x1a>
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001002:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800101c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b02      	cmp	r3, #2
 800104c:	d101      	bne.n	8001052 <LL_RCC_LSI1_IsReady+0x18>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <LL_RCC_LSI1_IsReady+0x1a>
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800106a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800108c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80010a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d101      	bne.n	80010ba <LL_RCC_LSI2_IsReady+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_RCC_LSI2_IsReady+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010e2:	4313      	orrs	r3, r2
 80010e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b02      	cmp	r3, #2
 8001140:	d101      	bne.n	8001146 <LL_RCC_MSI_IsReady+0x16>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <LL_RCC_MSI_IsReady+0x18>
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800115a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800118a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001190:	d901      	bls.n	8001196 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001192:	23b0      	movs	r3, #176	@ 0xb0
 8001194:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 0203 	bic.w	r2, r3, #3
 80011e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	608b      	str	r3, [r1, #8]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 030c 	and.w	r3, r3, #12
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800123e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001242:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001246:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001272:	f023 020f 	bic.w	r2, r3, #15
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800127e:	4313      	orrs	r3, r2
 8001280:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001300:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001344:	6013      	str	r3, [r2, #0]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001362:	d101      	bne.n	8001368 <LL_RCC_PLL_IsReady+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_RCC_PLL_IsReady+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80013aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f003 0303 	and.w	r3, r3, #3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e8:	d101      	bne.n	80013ee <LL_RCC_IsActiveFlag_HPRE+0x18>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80013fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001402:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800140e:	d101      	bne.n	8001414 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001428:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800142c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001434:	d101      	bne.n	800143a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800144a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001458:	d101      	bne.n	800145e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001478:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800147c:	d101      	bne.n	8001482 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b08d      	sub	sp, #52	@ 0x34
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e363      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 808d 	beq.w	80015ca <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b0:	f7ff fea1 	bl	80011f6 <LL_RCC_GetSysClkSource>
 80014b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b6:	f7ff ff82 	bl	80013be <LL_RCC_PLL_GetMainSource>
 80014ba:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x3e>
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d147      	bne.n	8001558 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d144      	bne.n	8001558 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e347      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80014de:	f7ff fe4c 	bl	800117a <LL_RCC_MSI_GetRange>
 80014e2:	4603      	mov	r3, r0
 80014e4:	429c      	cmp	r4, r3
 80014e6:	d914      	bls.n	8001512 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fd03 	bl	8001ef8 <RCC_SetFlashLatencyFromMSIRange>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e336      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe26 	bl	8001152 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe4a 	bl	80011a4 <LL_RCC_MSI_SetCalibTrimming>
 8001510:	e013      	b.n	800153a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fe1b 	bl	8001152 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe3f 	bl	80011a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fce4 	bl	8001ef8 <RCC_SetFlashLatencyFromMSIRange>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e317      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800153a:	f000 fcc9 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 800153e:	4603      	mov	r3, r0
 8001540:	4aa4      	ldr	r2, [pc, #656]	@ (80017d4 <HAL_RCC_OscConfig+0x344>)
 8001542:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001544:	4ba4      	ldr	r3, [pc, #656]	@ (80017d8 <HAL_RCC_OscConfig+0x348>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f92f 	bl	80007ac <HAL_InitTick>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d039      	beq.n	80015c8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e308      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01e      	beq.n	800159e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001560:	f7ff fdc8 	bl	80010f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001564:	f7ff f970 	bl	8000848 <HAL_GetTick>
 8001568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156c:	f7ff f96c 	bl	8000848 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e2f5      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800157e:	f7ff fdd7 	bl	8001130 <LL_RCC_MSI_IsReady>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f1      	beq.n	800156c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fde0 	bl	8001152 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe04 	bl	80011a4 <LL_RCC_MSI_SetCalibTrimming>
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800159e:	f7ff fdb8 	bl	8001112 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a2:	f7ff f951 	bl	8000848 <HAL_GetTick>
 80015a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015aa:	f7ff f94d 	bl	8000848 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e2d6      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80015bc:	f7ff fdb8 	bl	8001130 <LL_RCC_MSI_IsReady>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f1      	bne.n	80015aa <HAL_RCC_OscConfig+0x11a>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80015c8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d047      	beq.n	8001666 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d6:	f7ff fe0e 	bl	80011f6 <LL_RCC_GetSysClkSource>
 80015da:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015dc:	f7ff feef 	bl	80013be <LL_RCC_PLL_GetMainSource>
 80015e0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x164>
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d108      	bne.n	8001600 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d105      	bne.n	8001600 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d134      	bne.n	8001666 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e2b4      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001608:	d102      	bne.n	8001610 <HAL_RCC_OscConfig+0x180>
 800160a:	f7ff fbf5 	bl	8000df8 <LL_RCC_HSE_Enable>
 800160e:	e001      	b.n	8001614 <HAL_RCC_OscConfig+0x184>
 8001610:	f7ff fc01 	bl	8000e16 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d012      	beq.n	8001642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff f914 	bl	8000848 <HAL_GetTick>
 8001620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff f910 	bl	8000848 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	@ 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e299      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001636:	f7ff fbfd 	bl	8000e34 <LL_RCC_HSE_IsReady>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f1      	beq.n	8001624 <HAL_RCC_OscConfig+0x194>
 8001640:	e011      	b.n	8001666 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff f901 	bl	8000848 <HAL_GetTick>
 8001646:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164a:	f7ff f8fd 	bl	8000848 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	@ 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e286      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800165c:	f7ff fbea 	bl	8000e34 <LL_RCC_HSE_IsReady>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f1      	bne.n	800164a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04c      	beq.n	800170c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001672:	f7ff fdc0 	bl	80011f6 <LL_RCC_GetSysClkSource>
 8001676:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001678:	f7ff fea1 	bl	80013be <LL_RCC_PLL_GetMainSource>
 800167c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x200>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d10e      	bne.n	80016a8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e266      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fc09 	bl	8000eb8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016a6:	e031      	b.n	800170c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d019      	beq.n	80016e4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	f7ff fbd2 	bl	8000e58 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f8c8 	bl	8000848 <HAL_GetTick>
 80016b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff f8c4 	bl	8000848 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e24d      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80016ce:	f7ff fbe1 	bl	8000e94 <LL_RCC_HSI_IsReady>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f1      	beq.n	80016bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fbeb 	bl	8000eb8 <LL_RCC_HSI_SetCalibTrimming>
 80016e2:	e013      	b.n	800170c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e4:	f7ff fbc7 	bl	8000e76 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff f8ae 	bl	8000848 <HAL_GetTick>
 80016ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff f8aa 	bl	8000848 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e233      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001702:	f7ff fbc7 	bl	8000e94 <LL_RCC_HSI_IsReady>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f1      	bne.n	80016f0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a3 	beq.w	800186c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d076      	beq.n	800181c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d046      	beq.n	80017c8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800173a:	f7ff fc7e 	bl	800103a <LL_RCC_LSI1_IsReady>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d113      	bne.n	800176c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001744:	f7ff fc57 	bl	8000ff6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001748:	f7ff f87e 	bl	8000848 <HAL_GetTick>
 800174c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001750:	f7ff f87a 	bl	8000848 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e203      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001762:	f7ff fc6a 	bl	800103a <LL_RCC_LSI1_IsReady>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f1      	beq.n	8001750 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800176c:	f7ff fc77 	bl	800105e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f86a 	bl	8000848 <HAL_GetTick>
 8001774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001778:	f7ff f866 	bl	8000848 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b03      	cmp	r3, #3
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1ef      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800178a:	f7ff fc8a 	bl	80010a2 <LL_RCC_LSI2_IsReady>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f1      	beq.n	8001778 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fc94 	bl	80010c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800179e:	f7ff fc3b 	bl	8001018 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff f851 	bl	8000848 <HAL_GetTick>
 80017a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017aa:	f7ff f84d 	bl	8000848 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1d6      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80017bc:	f7ff fc3d 	bl	800103a <LL_RCC_LSI1_IsReady>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f1      	bne.n	80017aa <HAL_RCC_OscConfig+0x31a>
 80017c6:	e051      	b.n	800186c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80017c8:	f7ff fc15 	bl	8000ff6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff f83c 	bl	8000848 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80017d2:	e00c      	b.n	80017ee <HAL_RCC_OscConfig+0x35e>
 80017d4:	20000008 	.word	0x20000008
 80017d8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017dc:	f7ff f834 	bl	8000848 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1bd      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80017ee:	f7ff fc24 	bl	800103a <LL_RCC_LSI1_IsReady>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f1      	beq.n	80017dc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80017f8:	f7ff fc42 	bl	8001080 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017fe:	f7ff f823 	bl	8000848 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b03      	cmp	r3, #3
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1ac      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001810:	f7ff fc47 	bl	80010a2 <LL_RCC_LSI2_IsReady>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f1      	bne.n	80017fe <HAL_RCC_OscConfig+0x36e>
 800181a:	e027      	b.n	800186c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800181c:	f7ff fc30 	bl	8001080 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff f812 	bl	8000848 <HAL_GetTick>
 8001824:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001828:	f7ff f80e 	bl	8000848 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e197      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800183a:	f7ff fc32 	bl	80010a2 <LL_RCC_LSI2_IsReady>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f1      	bne.n	8001828 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001844:	f7ff fbe8 	bl	8001018 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7fe fffe 	bl	8000848 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001850:	f7fe fffa 	bl	8000848 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e183      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001862:	f7ff fbea 	bl	800103a <LL_RCC_LSI1_IsReady>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f1      	bne.n	8001850 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d05b      	beq.n	8001930 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001878:	4ba7      	ldr	r3, [pc, #668]	@ (8001b18 <HAL_RCC_OscConfig+0x688>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d114      	bne.n	80018ae <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001884:	f7ff fa88 	bl	8000d98 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001888:	f7fe ffde 	bl	8000848 <HAL_GetTick>
 800188c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001890:	f7fe ffda 	bl	8000848 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e163      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	4b9d      	ldr	r3, [pc, #628]	@ (8001b18 <HAL_RCC_OscConfig+0x688>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d102      	bne.n	80018bc <HAL_RCC_OscConfig+0x42c>
 80018b6:	f7ff fb48 	bl	8000f4a <LL_RCC_LSE_Enable>
 80018ba:	e00c      	b.n	80018d6 <HAL_RCC_OscConfig+0x446>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d104      	bne.n	80018ce <HAL_RCC_OscConfig+0x43e>
 80018c4:	f7ff fb63 	bl	8000f8e <LL_RCC_LSE_EnableBypass>
 80018c8:	f7ff fb3f 	bl	8000f4a <LL_RCC_LSE_Enable>
 80018cc:	e003      	b.n	80018d6 <HAL_RCC_OscConfig+0x446>
 80018ce:	f7ff fb4d 	bl	8000f6c <LL_RCC_LSE_Disable>
 80018d2:	f7ff fb6d 	bl	8000fb0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d014      	beq.n	8001908 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7fe ffb3 	bl	8000848 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7fe ffaf 	bl	8000848 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e136      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80018fc:	f7ff fb69 	bl	8000fd2 <LL_RCC_LSE_IsReady>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ef      	beq.n	80018e6 <HAL_RCC_OscConfig+0x456>
 8001906:	e013      	b.n	8001930 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7fe ff9e 	bl	8000848 <HAL_GetTick>
 800190c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7fe ff9a 	bl	8000848 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e121      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001926:	f7ff fb54 	bl	8000fd2 <LL_RCC_LSE_IsReady>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ef      	bne.n	8001910 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d02c      	beq.n	8001996 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001944:	f7ff facd 	bl	8000ee2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7fe ff7e 	bl	8000848 <HAL_GetTick>
 800194c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001950:	f7fe ff7a 	bl	8000848 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e103      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001962:	f7ff fae0 	bl	8000f26 <LL_RCC_HSI48_IsReady>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f1      	beq.n	8001950 <HAL_RCC_OscConfig+0x4c0>
 800196c:	e013      	b.n	8001996 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196e:	f7ff fac9 	bl	8000f04 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7fe ff69 	bl	8000848 <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7fe ff65 	bl	8000848 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0ee      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800198c:	f7ff facb 	bl	8000f26 <LL_RCC_HSI48_IsReady>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f1      	bne.n	800197a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80e4 	beq.w	8001b68 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a0:	f7ff fc29 	bl	80011f6 <LL_RCC_GetSysClkSource>
 80019a4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	f040 80b4 	bne.w	8001b20 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d123      	bne.n	8001a0e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d11c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d114      	bne.n	8001a0e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10d      	bne.n	8001a0e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d05d      	beq.n	8001aca <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d058      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0a1      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a26:	f7ff fc84 	bl	8001332 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a2a:	f7fe ff0d 	bl	8000848 <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7fe ff09 	bl	8000848 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e092      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <HAL_RCC_OscConfig+0x68c>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a64:	4311      	orrs	r1, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a6a:	0212      	lsls	r2, r2, #8
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a88:	f7ff fc44 	bl	8001314 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a9c:	f7fe fed4 	bl	8000848 <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7fe fed0 	bl	8000848 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e059      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ef      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	e050      	b.n	8001b68 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d147      	bne.n	8001b68 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ad8:	f7ff fc1c 	bl	8001314 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aec:	f7fe feac 	bl	8000848 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7fe fea8 	bl	8000848 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e031      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x664>
 8001b14:	e028      	b.n	8001b68 <HAL_RCC_OscConfig+0x6d8>
 8001b16:	bf00      	nop
 8001b18:	58000400 	.word	0x58000400
 8001b1c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d01e      	beq.n	8001b64 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	f7ff fc04 	bl	8001332 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fe8d 	bl	8000848 <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe fe89 	bl	8000848 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e012      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ef      	bne.n	8001b32 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_RCC_OscConfig+0x6e4>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
 8001b62:	e001      	b.n	8001b68 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3734      	adds	r7, #52	@ 0x34
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	eefefffc 	.word	0xeefefffc

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e12d      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b98      	ldr	r3, [pc, #608]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d91b      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b95      	ldr	r3, [pc, #596]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4993      	ldr	r1, [pc, #588]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001baa:	f7fe fe4d 	bl	8000848 <HAL_GetTick>
 8001bae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bb2:	f7fe fe49 	bl	8000848 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e111      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d1ef      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fb13 	bl	800120e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001be8:	f7fe fe2e 	bl	8000848 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bf0:	f7fe fe2a 	bl	8000848 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0f2      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001c02:	f7ff fbe8 	bl	80013d6 <LL_RCC_IsActiveFlag_HPRE>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f1      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d016      	beq.n	8001c46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fb0a 	bl	8001236 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c22:	f7fe fe11 	bl	8000848 <HAL_GetTick>
 8001c26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c2a:	f7fe fe0d 	bl	8000848 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0d5      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c3c:	f7ff fbdd 	bl	80013fa <LL_RCC_IsActiveFlag_C2HPRE>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f1      	beq.n	8001c2a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fb03 	bl	8001262 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c5c:	f7fe fdf4 	bl	8000848 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c64:	f7fe fdf0 	bl	8000848 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0b8      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c76:	f7ff fbd3 	bl	8001420 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f1      	beq.n	8001c64 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d016      	beq.n	8001cba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fafd 	bl	8001290 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c96:	f7fe fdd7 	bl	8000848 <HAL_GetTick>
 8001c9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c9e:	f7fe fdd3 	bl	8000848 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e09b      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001cb0:	f7ff fbc9 	bl	8001446 <LL_RCC_IsActiveFlag_PPRE1>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f1      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d017      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff faf3 	bl	80012b8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cd2:	f7fe fdb9 	bl	8000848 <HAL_GetTick>
 8001cd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cda:	f7fe fdb5 	bl	8000848 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e07d      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cec:	f7ff fbbd 	bl	800146a <LL_RCC_IsActiveFlag_PPRE2>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f1      	beq.n	8001cda <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d043      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001d0a:	f7ff f893 	bl	8000e34 <LL_RCC_HSE_IsReady>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d11e      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e067      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001d20:	f7ff fb16 	bl	8001350 <LL_RCC_PLL_IsReady>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d113      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e05c      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001d36:	f7ff f9fb 	bl	8001130 <LL_RCC_MSI_IsReady>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d108      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e051      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001d44:	f7ff f8a6 	bl	8000e94 <LL_RCC_HSI_IsReady>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e04a      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fa39 	bl	80011ce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fd74 	bl	8000848 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7fe fd70 	bl	8000848 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e036      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	f7ff fa3c 	bl	80011f6 <LL_RCC_GetSysClkSource>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d1ec      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8a:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d21b      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d98:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 0207 	bic.w	r2, r3, #7
 8001da0:	4913      	ldr	r1, [pc, #76]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da8:	f7fe fd4e 	bl	8000848 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001db0:	f7fe fd4a 	bl	8000848 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e012      	b.n	8001de8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1ef      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dd0:	f000 f87e 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_RCC_ClockConfig+0x27c>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001dda:	f7fe fd41 	bl	8000860 <HAL_GetTickPrio>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fce3 	bl	80007ac <HAL_InitTick>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58004000 	.word	0x58004000
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	f7ff f9fa 	bl	80011f6 <LL_RCC_GetSysClkSource>
 8001e02:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e0a:	f7ff f9b6 	bl	800117a <LL_RCC_MSI_GetRange>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e04b      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d102      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e26:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e045      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d10a      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e32:	f7fe ffcf 	bl	8000dd4 <LL_RCC_HSE_IsEnabledDiv2>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e03a      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e037      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001e48:	f7ff fab9 	bl	80013be <LL_RCC_PLL_GetMainSource>
 8001e4c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d003      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x64>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x6a>
 8001e5a:	e00d      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e5e:	60bb      	str	r3, [r7, #8]
        break;
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e62:	f7fe ffb7 	bl	8000dd4 <LL_RCC_HSE_IsEnabledDiv2>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e6e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001e70:	e00d      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e74:	60bb      	str	r3, [r7, #8]
        break;
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e78:	f7ff f97f 	bl	800117a <LL_RCC_MSI_GetRange>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	60bb      	str	r3, [r7, #8]
        break;
 8001e8c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001e8e:	f7ff fa71 	bl	8001374 <LL_RCC_PLL_GetN>
 8001e92:	4602      	mov	r2, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	fb03 f402 	mul.w	r4, r3, r2
 8001e9a:	f7ff fa84 	bl	80013a6 <LL_RCC_PLL_GetDivider>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	fbb4 f4f3 	udiv	r4, r4, r3
 8001ea8:	f7ff fa71 	bl	800138e <LL_RCC_PLL_GetR>
 8001eac:	4603      	mov	r3, r0
 8001eae:	0f5b      	lsrs	r3, r3, #29
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	fbb4 f3f3 	udiv	r3, r4, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	08003884 	.word	0x08003884
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	01e84800 	.word	0x01e84800

08001ed0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b598      	push	{r3, r4, r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ed4:	f7ff ff90 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001ed8:	4604      	mov	r4, r0
 8001eda:	f7ff fa01 	bl	80012e0 <LL_RCC_GetAHBPrescaler>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	4a03      	ldr	r2, [pc, #12]	@ (8001ef4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd98      	pop	{r3, r4, r7, pc}
 8001ef4:	08003844 	.word	0x08003844

08001ef8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2bb0      	cmp	r3, #176	@ 0xb0
 8001f04:	d903      	bls.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e007      	b.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001f1e:	f7ff f9eb 	bl	80012f8 <LL_RCC_GetAHB4Prescaler>
 8001f22:	4603      	mov	r3, r0
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	0c9c      	lsrs	r4, r3, #18
 8001f42:	f7fe ff39 	bl	8000db8 <HAL_PWREx_GetVoltageRange>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f000 f80c 	bl	8001f68 <RCC_SetFlashLatency>
 8001f50:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	08003884 	.word	0x08003884
 8001f60:	08003844 	.word	0x08003844
 8001f64:	431bde83 	.word	0x431bde83

08001f68 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b093      	sub	sp, #76	@ 0x4c
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001f72:	4b37      	ldr	r3, [pc, #220]	@ (8002050 <RCC_SetFlashLatency+0xe8>)
 8001f74:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001f7e:	4a35      	ldr	r2, [pc, #212]	@ (8002054 <RCC_SetFlashLatency+0xec>)
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001f8a:	4b33      	ldr	r3, [pc, #204]	@ (8002058 <RCC_SetFlashLatency+0xf0>)
 8001f8c:	f107 040c 	add.w	r4, r7, #12
 8001f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f96:	2300      	movs	r3, #0
 8001f98:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa0:	d11a      	bne.n	8001fd8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fa6:	e013      	b.n	8001fd0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3348      	adds	r3, #72	@ 0x48
 8001fae:	443b      	add	r3, r7
 8001fb0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d807      	bhi.n	8001fca <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3348      	adds	r3, #72	@ 0x48
 8001fc0:	443b      	add	r3, r7
 8001fc2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001fc6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001fc8:	e020      	b.n	800200c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fcc:	3301      	adds	r3, #1
 8001fce:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d9e8      	bls.n	8001fa8 <RCC_SetFlashLatency+0x40>
 8001fd6:	e019      	b.n	800200c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fdc:	e013      	b.n	8002006 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	3348      	adds	r3, #72	@ 0x48
 8001fe4:	443b      	add	r3, r7
 8001fe6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d807      	bhi.n	8002000 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3348      	adds	r3, #72	@ 0x48
 8001ff6:	443b      	add	r3, r7
 8001ff8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001ffc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001ffe:	e005      	b.n	800200c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002002:	3301      	adds	r3, #1
 8002004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002008:	2b02      	cmp	r3, #2
 800200a:	d9e8      	bls.n	8001fde <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <RCC_SetFlashLatency+0xf4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 0207 	bic.w	r2, r3, #7
 8002014:	4911      	ldr	r1, [pc, #68]	@ (800205c <RCC_SetFlashLatency+0xf4>)
 8002016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800201c:	f7fe fc14 	bl	8000848 <HAL_GetTick>
 8002020:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002022:	e008      	b.n	8002036 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002024:	f7fe fc10 	bl	8000848 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e007      	b.n	8002046 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <RCC_SetFlashLatency+0xf4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002040:	429a      	cmp	r2, r3
 8002042:	d1ef      	bne.n	8002024 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	374c      	adds	r7, #76	@ 0x4c
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	08003818 	.word	0x08003818
 8002054:	08003828 	.word	0x08003828
 8002058:	08003834 	.word	0x08003834
 800205c:	58004000 	.word	0x58004000

08002060 <LL_RCC_LSE_IsEnabled>:
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <LL_RCC_LSE_IsEnabled+0x18>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <LL_RCC_LSE_IsEnabled+0x1a>
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_LSE_IsReady>:
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b02      	cmp	r3, #2
 8002096:	d101      	bne.n	800209c <LL_RCC_LSE_IsReady+0x18>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_RCC_LSE_IsReady+0x1a>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_SetRFWKPClockSource>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_SetSMPSClockSource>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_RCC_SetSMPSPrescaler>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800210e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4313      	orrs	r3, r2
 8002116:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_RCC_SetUSARTClockSource>:
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002134:	f023 0203 	bic.w	r2, r3, #3
 8002138:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_RCC_SetLPUARTClockSource>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_RCC_SetI2CClockSource>:
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002188:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80021a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_RCC_SetLPTIMClockSource>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_RCC_SetSAIClockSource>:
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_RCC_SetRNGClockSource>:
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_RCC_SetCLK48ClockSource>:
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800224a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_RCC_SetUSBClockSource>:
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffe3 	bl	8002242 <LL_RCC_SetCLK48ClockSource>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <LL_RCC_SetADCClockSource>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002294:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002298:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_SetRTCClockSource>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_RCC_GetRTCClockSource>:
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_ForceBackupDomainReset>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002324:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_RCC_PLLSAI1_Enable>:
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002348:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800234c:	6013      	str	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_RCC_PLLSAI1_Disable>:
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800235c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_RCC_PLLSAI1_IsReady>:
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002388:	d101      	bne.n	800238e <LL_RCC_PLLSAI1_IsReady+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b088      	sub	sp, #32
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80023a2:	2300      	movs	r3, #0
 80023a4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80023a6:	2300      	movs	r3, #0
 80023a8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d034      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023be:	d021      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80023c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023c4:	d81b      	bhi.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ca:	d01d      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80023cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023d0:	d815      	bhi.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x54>
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023da:	d110      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ea:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80023ec:	e00d      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f947 	bl	8002686 <RCCEx_PLLSAI1_ConfigNP>
 80023f8:	4603      	mov	r3, r0
 80023fa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80023fc:	e005      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	77fb      	strb	r3, [r7, #31]
        break;
 8002402:	e002      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002404:	bf00      	nop
 8002406:	e000      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800240a:	7ffb      	ldrb	r3, [r7, #31]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fee8 	bl	80021ea <LL_RCC_SetSAIClockSource>
 800241a:	e001      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800241c:	7ffb      	ldrb	r3, [r7, #31]
 800241e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002428:	2b00      	cmp	r3, #0
 800242a:	d046      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800242c:	f7ff ff56 	bl	80022dc <LL_RCC_GetRTCClockSource>
 8002430:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	429a      	cmp	r2, r3
 800243a:	d03c      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800243c:	f7fe fcac 	bl	8000d98 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff30 	bl	80022b0 <LL_RCC_SetRTCClockSource>
 8002450:	e02e      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800245c:	f7ff ff4b 	bl	80022f6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002460:	f7ff ff5a 	bl	8002318 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800247c:	f7ff fdf0 	bl	8002060 <LL_RCC_LSE_IsEnabled>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d114      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002486:	f7fe f9df 	bl	8000848 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800248c:	e00b      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe f9db 	bl	8000848 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d902      	bls.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	77fb      	strb	r3, [r7, #31]
              break;
 80024a4:	e004      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80024a6:	f7ff fded 	bl	8002084 <LL_RCC_LSE_IsReady>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d1ee      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80024b0:	7ffb      	ldrb	r3, [r7, #31]
 80024b2:	77bb      	strb	r3, [r7, #30]
 80024b4:	e001      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b6:	7ffb      	ldrb	r3, [r7, #31]
 80024b8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fe2a 	bl	8002124 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fe35 	bl	8002150 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fe5d 	bl	80021b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fe52 	bl	80021b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fe2a 	bl	800217c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fe1f 	bl	800217c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d022      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fe8d 	bl	800226e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800255c:	d107      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002568:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800256c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002572:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002576:	d10b      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f8dd 	bl	800273c <RCCEx_PLLSAI1_ConfigNQ>
 8002582:	4603      	mov	r3, r0
 8002584:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002586:	7ffb      	ldrb	r3, [r7, #31]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800258c:	7ffb      	ldrb	r3, [r7, #31]
 800258e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002598:	2b00      	cmp	r3, #0
 800259a:	d02b      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025ae:	d003      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fe2a 	bl	8002216 <LL_RCC_SetRNGClockSource>
 80025c2:	e00a      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x240>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff fe21 	bl	8002216 <LL_RCC_SetRNGClockSource>
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff fe34 	bl	8002242 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025de:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80025e2:	d107      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d022      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe3d 	bl	8002284 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002612:	d107      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800261e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002622:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800262c:	d10b      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f8dd 	bl	80027f2 <RCCEx_PLLSAI1_ConfigNR>
 8002638:	4603      	mov	r3, r0
 800263a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fd26 	bl	80020a8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fd45 	bl	80020fc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fd2c 	bl	80020d4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800267c:	7fbb      	ldrb	r3, [r7, #30]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002692:	f7ff fe61 	bl	8002358 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002696:	f7fe f8d7 	bl	8000848 <HAL_GetTick>
 800269a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800269c:	e009      	b.n	80026b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800269e:	f7fe f8d3 	bl	8000848 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d902      	bls.n	80026b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e004      	b.n	80026bc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80026b2:	f7ff fe60 	bl	8002376 <LL_RCC_PLLSAI1_IsReady>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d137      	bne.n	8002732 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ec:	4313      	orrs	r3, r2
 80026ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80026f0:	f7ff fe23 	bl	800233a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f4:	f7fe f8a8 	bl	8000848 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026fa:	e009      	b.n	8002710 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026fc:	f7fe f8a4 	bl	8000848 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d902      	bls.n	8002710 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	73fb      	strb	r3, [r7, #15]
        break;
 800270e:	e004      	b.n	800271a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002710:	f7ff fe31 	bl	8002376 <LL_RCC_PLLSAI1_IsReady>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d1f0      	bne.n	80026fc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d108      	bne.n	8002732 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800272e:	4313      	orrs	r3, r2
 8002730:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002748:	f7ff fe06 	bl	8002358 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800274c:	f7fe f87c 	bl	8000848 <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002752:	e009      	b.n	8002768 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002754:	f7fe f878 	bl	8000848 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	73fb      	strb	r3, [r7, #15]
      break;
 8002766:	e004      	b.n	8002772 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002768:	f7ff fe05 	bl	8002376 <LL_RCC_PLLSAI1_IsReady>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d137      	bne.n	80027e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800278c:	4313      	orrs	r3, r2
 800278e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027a2:	4313      	orrs	r3, r2
 80027a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80027a6:	f7ff fdc8 	bl	800233a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027aa:	f7fe f84d 	bl	8000848 <HAL_GetTick>
 80027ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027b0:	e009      	b.n	80027c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b2:	f7fe f849 	bl	8000848 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d902      	bls.n	80027c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	73fb      	strb	r3, [r7, #15]
        break;
 80027c4:	e004      	b.n	80027d0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027c6:	f7ff fdd6 	bl	8002376 <LL_RCC_PLLSAI1_IsReady>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d1f0      	bne.n	80027b2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027e4:	4313      	orrs	r3, r2
 80027e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80027fe:	f7ff fdab 	bl	8002358 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002802:	f7fe f821 	bl	8000848 <HAL_GetTick>
 8002806:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002808:	e009      	b.n	800281e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800280a:	f7fe f81d 	bl	8000848 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e004      	b.n	8002828 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800281e:	f7ff fdaa 	bl	8002376 <LL_RCC_PLLSAI1_IsReady>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d137      	bne.n	800289e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002842:	4313      	orrs	r3, r2
 8002844:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002858:	4313      	orrs	r3, r2
 800285a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800285c:	f7ff fd6d 	bl	800233a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002860:	f7fd fff2 	bl	8000848 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002866:	e009      	b.n	800287c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002868:	f7fd ffee 	bl	8000848 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	73fb      	strb	r3, [r7, #15]
        break;
 800287a:	e004      	b.n	8002886 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800287c:	f7ff fd7b 	bl	8002376 <LL_RCC_PLLSAI1_IsReady>
 8002880:	4603      	mov	r3, r0
 8002882:	2b01      	cmp	r3, #1
 8002884:	d1f0      	bne.n	8002868 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e049      	b.n	800294e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fd fe57 	bl	8000582 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fb4e 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e049      	b.n	80029fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f841 	bl	8002a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 faf7 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_TIM_PWM_Start+0x24>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e03c      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d109      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x3e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e02f      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d109      	bne.n	8002a70 <HAL_TIM_PWM_Start+0x58>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e022      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d109      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x72>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e015      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d109      	bne.n	8002aa4 <HAL_TIM_PWM_Start+0x8c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e008      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e079      	b.n	8002bb2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Start+0xb6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002acc:	e023      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Start+0xc6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002adc:	e01b      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Start+0xd6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aec:	e013      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Start+0xe6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002afc:	e00b      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start+0xf6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b0c:	e003      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fdbc 	bl	800369c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a24      	ldr	r2, [pc, #144]	@ (8002bbc <HAL_TIM_PWM_Start+0x1a4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x12a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <HAL_TIM_PWM_Start+0x1a8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x12a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a21      	ldr	r2, [pc, #132]	@ (8002bc4 <HAL_TIM_PWM_Start+0x1ac>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x12e>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_TIM_PWM_Start+0x130>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <HAL_TIM_PWM_Start+0x1a4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_TIM_PWM_Start+0x158>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6e:	d115      	bne.n	8002b9c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <HAL_TIM_PWM_Start+0x1b0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d015      	beq.n	8002bae <HAL_TIM_PWM_Start+0x196>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b88:	d011      	beq.n	8002bae <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	e008      	b.n	8002bae <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e000      	b.n	8002bb0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800
 8002bc8:	00010007 	.word	0x00010007

08002bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0ff      	b.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b14      	cmp	r3, #20
 8002bf6:	f200 80f0 	bhi.w	8002dda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c55 	.word	0x08002c55
 8002c04:	08002ddb 	.word	0x08002ddb
 8002c08:	08002ddb 	.word	0x08002ddb
 8002c0c:	08002ddb 	.word	0x08002ddb
 8002c10:	08002c95 	.word	0x08002c95
 8002c14:	08002ddb 	.word	0x08002ddb
 8002c18:	08002ddb 	.word	0x08002ddb
 8002c1c:	08002ddb 	.word	0x08002ddb
 8002c20:	08002cd7 	.word	0x08002cd7
 8002c24:	08002ddb 	.word	0x08002ddb
 8002c28:	08002ddb 	.word	0x08002ddb
 8002c2c:	08002ddb 	.word	0x08002ddb
 8002c30:	08002d17 	.word	0x08002d17
 8002c34:	08002ddb 	.word	0x08002ddb
 8002c38:	08002ddb 	.word	0x08002ddb
 8002c3c:	08002ddb 	.word	0x08002ddb
 8002c40:	08002d59 	.word	0x08002d59
 8002c44:	08002ddb 	.word	0x08002ddb
 8002c48:	08002ddb 	.word	0x08002ddb
 8002c4c:	08002ddb 	.word	0x08002ddb
 8002c50:	08002d99 	.word	0x08002d99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fa04 	bl	8003068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0208 	orr.w	r2, r2, #8
 8002c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0204 	bic.w	r2, r2, #4
 8002c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6999      	ldr	r1, [r3, #24]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	619a      	str	r2, [r3, #24]
      break;
 8002c92:	e0a5      	b.n	8002de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa60 	bl	8003160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6999      	ldr	r1, [r3, #24]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]
      break;
 8002cd4:	e084      	b.n	8002de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fab9 	bl	8003254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0208 	orr.w	r2, r2, #8
 8002cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0204 	bic.w	r2, r2, #4
 8002d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69d9      	ldr	r1, [r3, #28]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	61da      	str	r2, [r3, #28]
      break;
 8002d14:	e064      	b.n	8002de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fb11 	bl	8003344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	021a      	lsls	r2, r3, #8
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	61da      	str	r2, [r3, #28]
      break;
 8002d56:	e043      	b.n	8002de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fb4e 	bl	8003400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0208 	orr.w	r2, r2, #8
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d96:	e023      	b.n	8002de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb86 	bl	80034b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002dd8:	e002      	b.n	8002de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIM_ConfigClockSource+0x1c>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0b6      	b.n	8002f7e <HAL_TIM_ConfigClockSource+0x18a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002e2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4c:	d03e      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0xd8>
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e52:	f200 8087 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5a:	f000 8086 	beq.w	8002f6a <HAL_TIM_ConfigClockSource+0x176>
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e62:	d87f      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e64:	2b70      	cmp	r3, #112	@ 0x70
 8002e66:	d01a      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xaa>
 8002e68:	2b70      	cmp	r3, #112	@ 0x70
 8002e6a:	d87b      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e6c:	2b60      	cmp	r3, #96	@ 0x60
 8002e6e:	d050      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x11e>
 8002e70:	2b60      	cmp	r3, #96	@ 0x60
 8002e72:	d877      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e74:	2b50      	cmp	r3, #80	@ 0x50
 8002e76:	d03c      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0xfe>
 8002e78:	2b50      	cmp	r3, #80	@ 0x50
 8002e7a:	d873      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e7c:	2b40      	cmp	r3, #64	@ 0x40
 8002e7e:	d058      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x13e>
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	d86f      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e84:	2b30      	cmp	r3, #48	@ 0x30
 8002e86:	d064      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x15e>
 8002e88:	2b30      	cmp	r3, #48	@ 0x30
 8002e8a:	d86b      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d060      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x15e>
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d867      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05c      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x15e>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d05a      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x15e>
 8002e9c:	e062      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	f000 fbd5 	bl	800365c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	609a      	str	r2, [r3, #8]
      break;
 8002eca:	e04f      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	f000 fbbe 	bl	800365c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eee:	609a      	str	r2, [r3, #8]
      break;
 8002ef0:	e03c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	461a      	mov	r2, r3
 8002f00:	f000 fb30 	bl	8003564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2150      	movs	r1, #80	@ 0x50
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fb89 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8002f10:	e02c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f000 fb4f 	bl	80035c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2160      	movs	r1, #96	@ 0x60
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fb79 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8002f30:	e01c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f000 fb10 	bl	8003564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2140      	movs	r1, #64	@ 0x40
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fb69 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8002f50:	e00c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f000 fb60 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8002f62:	e003      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
      break;
 8002f68:	e000      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a30      	ldr	r2, [pc, #192]	@ (800305c <TIM_Base_SetConfig+0xd4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0x20>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa6:	d108      	bne.n	8002fba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a27      	ldr	r2, [pc, #156]	@ (800305c <TIM_Base_SetConfig+0xd4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_Base_SetConfig+0x52>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d007      	beq.n	8002fda <TIM_Base_SetConfig+0x52>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a24      	ldr	r2, [pc, #144]	@ (8003060 <TIM_Base_SetConfig+0xd8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_Base_SetConfig+0x52>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a23      	ldr	r2, [pc, #140]	@ (8003064 <TIM_Base_SetConfig+0xdc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d108      	bne.n	8002fec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a12      	ldr	r2, [pc, #72]	@ (800305c <TIM_Base_SetConfig+0xd4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <TIM_Base_SetConfig+0xa0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a11      	ldr	r2, [pc, #68]	@ (8003060 <TIM_Base_SetConfig+0xd8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_Base_SetConfig+0xa0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a10      	ldr	r2, [pc, #64]	@ (8003064 <TIM_Base_SetConfig+0xdc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d103      	bne.n	8003030 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f023 0201 	bic.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]
  }
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40014400 	.word	0x40014400
 8003064:	40014800 	.word	0x40014800

08003068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f023 0201 	bic.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 0302 	bic.w	r3, r3, #2
 80030b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a24      	ldr	r2, [pc, #144]	@ (8003154 <TIM_OC1_SetConfig+0xec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <TIM_OC1_SetConfig+0x70>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a23      	ldr	r2, [pc, #140]	@ (8003158 <TIM_OC1_SetConfig+0xf0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_OC1_SetConfig+0x70>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a22      	ldr	r2, [pc, #136]	@ (800315c <TIM_OC1_SetConfig+0xf4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10c      	bne.n	80030f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0308 	bic.w	r3, r3, #8
 80030de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a17      	ldr	r2, [pc, #92]	@ (8003154 <TIM_OC1_SetConfig+0xec>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <TIM_OC1_SetConfig+0xa2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a17      	ldr	r2, [pc, #92]	@ (800315c <TIM_OC1_SetConfig+0xf4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_OC1_SetConfig+0xa2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <TIM_OC1_SetConfig+0xf0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d111      	bne.n	800312e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	621a      	str	r2, [r3, #32]
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40014800 	.word	0x40014800
 800315c:	40014400 	.word	0x40014400

08003160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f023 0210 	bic.w	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0320 	bic.w	r3, r3, #32
 80031ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a22      	ldr	r2, [pc, #136]	@ (8003248 <TIM_OC2_SetConfig+0xe8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10d      	bne.n	80031e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a19      	ldr	r2, [pc, #100]	@ (8003248 <TIM_OC2_SetConfig+0xe8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d007      	beq.n	80031f8 <TIM_OC2_SetConfig+0x98>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a18      	ldr	r2, [pc, #96]	@ (800324c <TIM_OC2_SetConfig+0xec>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d003      	beq.n	80031f8 <TIM_OC2_SetConfig+0x98>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a17      	ldr	r2, [pc, #92]	@ (8003250 <TIM_OC2_SetConfig+0xf0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d113      	bne.n	8003220 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800

08003254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a21      	ldr	r2, [pc, #132]	@ (8003338 <TIM_OC3_SetConfig+0xe4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10d      	bne.n	80032d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <TIM_OC3_SetConfig+0xe4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_OC3_SetConfig+0x96>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a17      	ldr	r2, [pc, #92]	@ (800333c <TIM_OC3_SetConfig+0xe8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_OC3_SetConfig+0x96>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a16      	ldr	r2, [pc, #88]	@ (8003340 <TIM_OC3_SetConfig+0xec>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d113      	bne.n	8003312 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	031b      	lsls	r3, r3, #12
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a14      	ldr	r2, [pc, #80]	@ (80033f4 <TIM_OC4_SetConfig+0xb0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <TIM_OC4_SetConfig+0x74>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a13      	ldr	r2, [pc, #76]	@ (80033f8 <TIM_OC4_SetConfig+0xb4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_OC4_SetConfig+0x74>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <TIM_OC4_SetConfig+0xb8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d109      	bne.n	80033cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	019b      	lsls	r3, r3, #6
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800

08003400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003444:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a13      	ldr	r2, [pc, #76]	@ (80034a4 <TIM_OC5_SetConfig+0xa4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_OC5_SetConfig+0x6a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <TIM_OC5_SetConfig+0xa8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_OC5_SetConfig+0x6a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a11      	ldr	r2, [pc, #68]	@ (80034ac <TIM_OC5_SetConfig+0xac>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d109      	bne.n	800347e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	621a      	str	r2, [r3, #32]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800

080034b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80034f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	051b      	lsls	r3, r3, #20
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <TIM_OC6_SetConfig+0xa8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_OC6_SetConfig+0x6c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a13      	ldr	r2, [pc, #76]	@ (800355c <TIM_OC6_SetConfig+0xac>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC6_SetConfig+0x6c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <TIM_OC6_SetConfig+0xb0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d109      	bne.n	8003530 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003522:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	029b      	lsls	r3, r3, #10
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800

08003564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800358e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 030a 	bic.w	r3, r3, #10
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 0210 	bic.w	r2, r3, #16
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	f043 0307 	orr.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	021a      	lsls	r2, r3, #8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	431a      	orrs	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4313      	orrs	r3, r2
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	609a      	str	r2, [r3, #8]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2201      	movs	r2, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1a      	ldr	r2, [r3, #32]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	43db      	mvns	r3, r3
 80036be:	401a      	ands	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e04a      	b.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1f      	ldr	r2, [pc, #124]	@ (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003730:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a12      	ldr	r2, [pc, #72]	@ (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003768:	d10c      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40012c00 	.word	0x40012c00

080037a8 <memset>:
 80037a8:	4402      	add	r2, r0
 80037aa:	4603      	mov	r3, r0
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d100      	bne.n	80037b2 <memset+0xa>
 80037b0:	4770      	bx	lr
 80037b2:	f803 1b01 	strb.w	r1, [r3], #1
 80037b6:	e7f9      	b.n	80037ac <memset+0x4>

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4d0d      	ldr	r5, [pc, #52]	@ (80037f0 <__libc_init_array+0x38>)
 80037bc:	4c0d      	ldr	r4, [pc, #52]	@ (80037f4 <__libc_init_array+0x3c>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	2600      	movs	r6, #0
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	4d0b      	ldr	r5, [pc, #44]	@ (80037f8 <__libc_init_array+0x40>)
 80037ca:	4c0c      	ldr	r4, [pc, #48]	@ (80037fc <__libc_init_array+0x44>)
 80037cc:	f000 f818 	bl	8003800 <_init>
 80037d0:	1b64      	subs	r4, r4, r5
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	2600      	movs	r6, #0
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	080038c4 	.word	0x080038c4
 80037f4:	080038c4 	.word	0x080038c4
 80037f8:	080038c4 	.word	0x080038c4
 80037fc:	080038c8 	.word	0x080038c8

08003800 <_init>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	bf00      	nop
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr

0800380c <_fini>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr
