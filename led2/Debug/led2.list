
led2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ec  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002728  08002728  00003728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027d4  080027d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080027d8  080027d8  000037d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000008  080027dc  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000014  080027e8  00004014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  080027e8  00004034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000086db  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001977  00000000  00000000  0000c71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e88  00000000  00000000  0000e098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000acb  00000000  00000000  0000ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001fa39  00000000  00000000  0000f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000aefe  00000000  00000000  0002f424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cbbfd  00000000  00000000  0003a322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00105f1f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003a90  00000000  00000000  00105f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000061  00000000  00000000  001099f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08002710 	.word	0x08002710

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08002710 	.word	0x08002710

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c4:	2004      	movs	r0, #4
 80001c6:	f7ff ffd9 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ca:	2002      	movs	r0, #2
 80001cc:	f7ff ffd6 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2123      	movs	r1, #35	@ 0x23
 80001d4:	480f      	ldr	r0, [pc, #60]	@ (8000214 <MX_GPIO_Init+0x64>)
 80001d6:	f000 fccd 	bl	8000b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80001da:	2310      	movs	r3, #16
 80001dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e2:	2301      	movs	r3, #1
 80001e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	480b      	ldr	r0, [pc, #44]	@ (8000218 <MX_GPIO_Init+0x68>)
 80001ec:	f000 fb3a 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80001f0:	2323      	movs	r3, #35	@ 0x23
 80001f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4619      	mov	r1, r3
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <MX_GPIO_Init+0x64>)
 8000206:	f000 fb2d 	bl	8000864 <HAL_GPIO_Init>

}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	48000400 	.word	0x48000400
 8000218:	48000800 	.word	0x48000800

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 f991 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f851 	bl	80002cc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800022a:	f000 f8a7 	bl	800037c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f7ff ffbf 	bl	80001b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  uint8_t press_count = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	71fb      	strb	r3, [r7, #7]
  uint8_t prev_button_state = 1;  // 1 = not pressed, 0 = pressed
 8000236:	2301      	movs	r3, #1
 8000238:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 800023a:	2110      	movs	r1, #16
 800023c:	4821      	ldr	r0, [pc, #132]	@ (80002c4 <main+0xa8>)
 800023e:	f000 fc81 	bl	8000b44 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	717b      	strb	r3, [r7, #5]

	 	      // Detect rising edge: button was released before and now pressed
	 	      if (prev_button_state == 1 && current_state == 0)
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d138      	bne.n	80002be <main+0xa2>
 800024c:	797b      	ldrb	r3, [r7, #5]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d135      	bne.n	80002be <main+0xa2>
	 	      {
	 	          press_count++;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	3301      	adds	r3, #1
 8000256:	71fb      	strb	r3, [r7, #7]
	 	          if (press_count > 3) press_count = 1;
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	2b03      	cmp	r3, #3
 800025c:	d901      	bls.n	8000262 <main+0x46>
 800025e:	2301      	movs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]

	 	          // Turn off all LEDs first
	 	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2120      	movs	r1, #32
 8000266:	4818      	ldr	r0, [pc, #96]	@ (80002c8 <main+0xac>)
 8000268:	f000 fc84 	bl	8000b74 <HAL_GPIO_WritePin>
	 	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2102      	movs	r1, #2
 8000270:	4815      	ldr	r0, [pc, #84]	@ (80002c8 <main+0xac>)
 8000272:	f000 fc7f 	bl	8000b74 <HAL_GPIO_WritePin>
	 	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2101      	movs	r1, #1
 800027a:	4813      	ldr	r0, [pc, #76]	@ (80002c8 <main+0xac>)
 800027c:	f000 fc7a 	bl	8000b74 <HAL_GPIO_WritePin>

	 	          // Turn ON the corresponding LED
	 	          switch (press_count)
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b03      	cmp	r3, #3
 8000284:	d012      	beq.n	80002ac <main+0x90>
 8000286:	2b03      	cmp	r3, #3
 8000288:	dc16      	bgt.n	80002b8 <main+0x9c>
 800028a:	2b01      	cmp	r3, #1
 800028c:	d002      	beq.n	8000294 <main+0x78>
 800028e:	2b02      	cmp	r3, #2
 8000290:	d006      	beq.n	80002a0 <main+0x84>
 8000292:	e011      	b.n	80002b8 <main+0x9c>
	 	          {
	 	              case 1 :
	 	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // LED1
 8000294:	2201      	movs	r2, #1
 8000296:	2102      	movs	r1, #2
 8000298:	480b      	ldr	r0, [pc, #44]	@ (80002c8 <main+0xac>)
 800029a:	f000 fc6b 	bl	8000b74 <HAL_GPIO_WritePin>
	 	                  break;
 800029e:	e00b      	b.n	80002b8 <main+0x9c>
	 	              case 2:
	 	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // LED2
 80002a0:	2201      	movs	r2, #1
 80002a2:	2120      	movs	r1, #32
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <main+0xac>)
 80002a6:	f000 fc65 	bl	8000b74 <HAL_GPIO_WritePin>
	 	                  break;
 80002aa:	e005      	b.n	80002b8 <main+0x9c>
	 	              case 3:
	 	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED3
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <main+0xac>)
 80002b2:	f000 fc5f 	bl	8000b74 <HAL_GPIO_WritePin>
	 	                  break;
 80002b6:	bf00      	nop
	 	          }

	 	          HAL_Delay(200);  // Simple debounce delay
 80002b8:	20c8      	movs	r0, #200	@ 0xc8
 80002ba:	f000 f9cb 	bl	8000654 <HAL_Delay>
	 	      }

	 	      prev_button_state = current_state;
 80002be:	797b      	ldrb	r3, [r7, #5]
 80002c0:	71bb      	strb	r3, [r7, #6]
  {
 80002c2:	e7ba      	b.n	800023a <main+0x1e>
 80002c4:	48000800 	.word	0x48000800
 80002c8:	48000400 	.word	0x48000400

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09a      	sub	sp, #104	@ 0x68
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0320 	add.w	r3, r7, #32
 80002d6:	2248      	movs	r2, #72	@ 0x48
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 f9ec 	bl	80026b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]
 80002ee:	615a      	str	r2, [r3, #20]
 80002f0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002f2:	4b21      	ldr	r3, [pc, #132]	@ (8000378 <SystemClock_Config+0xac>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80002fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000378 <SystemClock_Config+0xac>)
 80002fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	4b1d      	ldr	r3, [pc, #116]	@ (8000378 <SystemClock_Config+0xac>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800030e:	2322      	movs	r3, #34	@ 0x22
 8000310:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	2340      	movs	r3, #64	@ 0x40
 800031e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000320:	2300      	movs	r3, #0
 8000322:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000324:	2360      	movs	r3, #96	@ 0x60
 8000326:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000328:	2300      	movs	r3, #0
 800032a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0320 	add.w	r3, r7, #32
 8000330:	4618      	mov	r0, r3
 8000332:	f000 ffb3 	bl	800129c <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800033c:	f000 f83b 	bl	80003b6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000340:	236f      	movs	r3, #111	@ 0x6f
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fb0f 	bl	8001984 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800036c:	f000 f823 	bl	80003b6 <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3768      	adds	r7, #104	@ 0x68
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	58000400 	.word	0x58000400

0800037c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b094      	sub	sp, #80	@ 0x50
 8000380:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000382:	463b      	mov	r3, r7
 8000384:	2250      	movs	r2, #80	@ 0x50
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f002 f995 	bl	80026b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800038e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000392:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000394:	2300      	movs	r3, #0
 8000396:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000398:	2310      	movs	r3, #16
 800039a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800039c:	463b      	mov	r3, r7
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 ff03 	bl	80021aa <HAL_RCCEx_PeriphCLKConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80003aa:	f000 f804 	bl	80003b6 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003ae:	bf00      	nop
 80003b0:	3750      	adds	r7, #80	@ 0x50
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ba:	b672      	cpsid	i
}
 80003bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003be:	bf00      	nop
 80003c0:	e7fd      	b.n	80003be <Error_Handler+0x8>

080003c2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <NMI_Handler+0x4>

080003d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <MemManage_Handler+0x4>

080003e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000426:	f000 f8e9 	bl	80005fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000434:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <SystemInit+0x98>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800043a:	4a23      	ldr	r2, [pc, #140]	@ (80004c8 <SystemInit+0x98>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000458:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800045c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800045e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <SystemInit+0x9c>)
 800046a:	4013      	ands	r3, r2
 800046c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800046e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000476:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800047a:	f023 0305 	bic.w	r3, r3, #5
 800047e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000486:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800048a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800049a:	4a0d      	ldr	r2, [pc, #52]	@ (80004d0 <SystemInit+0xa0>)
 800049c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800049e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004a2:	4a0b      	ldr	r2, [pc, #44]	@ (80004d0 <SystemInit+0xa0>)
 80004a4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80004b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80004b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	faf6fefb 	.word	0xfaf6fefb
 80004d0:	22041000 	.word	0x22041000

080004d4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80004d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d8:	3304      	adds	r3, #4

080004da <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004dc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80004de:	d3f9      	bcc.n	80004d4 <CopyDataInit>
  bx lr
 80004e0:	4770      	bx	lr

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80004e2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80004e4:	3004      	adds	r0, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80004e6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>
  bx lr
 80004ea:	4770      	bx	lr

080004ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ec:	480c      	ldr	r0, [pc, #48]	@ (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f0:	f7ff ff9e 	bl	8000430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004f4:	480b      	ldr	r0, [pc, #44]	@ (8000524 <LoopForever+0x6>)
 80004f6:	490c      	ldr	r1, [pc, #48]	@ (8000528 <LoopForever+0xa>)
 80004f8:	4a0c      	ldr	r2, [pc, #48]	@ (800052c <LoopForever+0xe>)
 80004fa:	2300      	movs	r3, #0
 80004fc:	f7ff ffed 	bl	80004da <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000500:	480b      	ldr	r0, [pc, #44]	@ (8000530 <LoopForever+0x12>)
 8000502:	490c      	ldr	r1, [pc, #48]	@ (8000534 <LoopForever+0x16>)
 8000504:	4a0c      	ldr	r2, [pc, #48]	@ (8000538 <LoopForever+0x1a>)
 8000506:	2300      	movs	r3, #0
 8000508:	f7ff ffe7 	bl	80004da <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <LoopForever+0x1e>)
 800050e:	490c      	ldr	r1, [pc, #48]	@ (8000540 <LoopForever+0x22>)
 8000510:	2300      	movs	r3, #0
 8000512:	f7ff ffe8 	bl	80004e6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000516:	f002 f8d7 	bl	80026c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800051a:	f7ff fe7f 	bl	800021c <main>

0800051e <LoopForever>:

LoopForever:
  b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000524:	20000008 	.word	0x20000008
 8000528:	20000014 	.word	0x20000014
 800052c:	080027dc 	.word	0x080027dc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000530:	20030000 	.word	0x20030000
 8000534:	20030000 	.word	0x20030000
 8000538:	080027e8 	.word	0x080027e8
  INIT_BSS _sbss, _ebss
 800053c:	20000014 	.word	0x20000014
 8000540:	20000034 	.word	0x20000034

08000544 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_IRQHandler>
	...

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <HAL_Init+0x3c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0b      	ldr	r2, [pc, #44]	@ (8000584 <HAL_Init+0x3c>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800055c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	2003      	movs	r0, #3
 8000560:	f000 f94e 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000564:	200f      	movs	r0, #15
 8000566:	f000 f80f 	bl	8000588 <HAL_InitTick>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000570:	2301      	movs	r3, #1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	e001      	b.n	800057a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000576:	f7ff ff24 	bl	80003c2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800057a:	79fb      	ldrb	r3, [r7, #7]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	58004000 	.word	0x58004000

08000588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <HAL_InitTick+0x6c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d024      	beq.n	80005e6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800059c:	f001 fba0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <HAL_InitTick+0x6c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f948 	bl	800084a <HAL_SYSTICK_Config>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d10f      	bne.n	80005e0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b0f      	cmp	r3, #15
 80005c4:	d809      	bhi.n	80005da <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c6:	2200      	movs	r2, #0
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295
 80005ce:	f000 f922 	bl	8000816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <HAL_InitTick+0x70>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	e007      	b.n	80005ea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	e004      	b.n	80005ea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e001      	b.n	80005ea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000010 	.word	0x20000010
 80005f8:	2000000c 	.word	0x2000000c

080005fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_IncTick+0x20>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_IncTick+0x24>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <HAL_IncTick+0x24>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000010 	.word	0x20000010
 8000620:	20000030 	.word	0x20000030

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000030 	.word	0x20000030

0800063c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <HAL_GetTickPrio+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000000c 	.word	0x2000000c

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffe2 	bl	8000624 <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <HAL_Delay+0x44>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffd2 	bl	8000624 <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000010 	.word	0x20000010

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db0a      	blt.n	800072a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	490c      	ldr	r1, [pc, #48]	@ (800074c <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000728:	e00a      	b.n	8000740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4908      	ldr	r1, [pc, #32]	@ (8000750 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	0112      	lsls	r2, r2, #4
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	440b      	add	r3, r1
 800073e:	761a      	strb	r2, [r3, #24]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	@ 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2b04      	cmp	r3, #4
 8000770:	bf28      	it	cs
 8000772:	2304      	movcs	r3, #4
 8000774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3304      	adds	r3, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	d902      	bls.n	8000784 <NVIC_EncodePriority+0x30>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3b03      	subs	r3, #3
 8000782:	e000      	b.n	8000786 <NVIC_EncodePriority+0x32>
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 32ff 	mov.w	r2, #4294967295
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43da      	mvns	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	@ 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f7ff ff8e 	bl	8000700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff47 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000824:	f7ff ff5e 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f7ff ff90 	bl	8000754 <NVIC_EncodePriority>
 8000834:	4602      	mov	r2, r0
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff5f 	bl	8000700 <__NVIC_SetPriority>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffb2 	bl	80007bc <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e14c      	b.n	8000b0e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	f000 813e 	beq.w	8000b08 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	2b01      	cmp	r3, #1
 8000896:	d005      	beq.n	80008a4 <HAL_GPIO_Init+0x40>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d130      	bne.n	8000906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2203      	movs	r2, #3
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008da:	2201      	movs	r2, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	f003 0201 	and.w	r2, r3, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	2b03      	cmp	r3, #3
 8000910:	d017      	beq.n	8000942 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	2b02      	cmp	r3, #2
 800094c:	d123      	bne.n	8000996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	220f      	movs	r2, #15
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	691a      	ldr	r2, [r3, #16]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	08da      	lsrs	r2, r3, #3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3208      	adds	r2, #8
 8000990:	6939      	ldr	r1, [r7, #16]
 8000992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0203 	and.w	r2, r3, #3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8098 	beq.w	8000b08 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80009d8:	4a54      	ldr	r2, [pc, #336]	@ (8000b2c <HAL_GPIO_Init+0x2c8>)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	220f      	movs	r2, #15
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a02:	d019      	beq.n	8000a38 <HAL_GPIO_Init+0x1d4>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a4a      	ldr	r2, [pc, #296]	@ (8000b30 <HAL_GPIO_Init+0x2cc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d013      	beq.n	8000a34 <HAL_GPIO_Init+0x1d0>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a49      	ldr	r2, [pc, #292]	@ (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d00d      	beq.n	8000a30 <HAL_GPIO_Init+0x1cc>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a48      	ldr	r2, [pc, #288]	@ (8000b38 <HAL_GPIO_Init+0x2d4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x1c8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a47      	ldr	r2, [pc, #284]	@ (8000b3c <HAL_GPIO_Init+0x2d8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <HAL_GPIO_Init+0x1c4>
 8000a24:	2304      	movs	r3, #4
 8000a26:	e008      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a28:	2307      	movs	r3, #7
 8000a2a:	e006      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e004      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e002      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	f002 0203 	and.w	r2, r2, #3
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	4093      	lsls	r3, r2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a4a:	4938      	ldr	r1, [pc, #224]	@ (8000b2c <HAL_GPIO_Init+0x2c8>)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3302      	adds	r3, #2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a58:	4b39      	ldr	r3, [pc, #228]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a7c:	4a30      	ldr	r2, [pc, #192]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a82:	4b2f      	ldr	r3, [pc, #188]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aa6:	4a26      	ldr	r2, [pc, #152]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aac:	4b24      	ldr	r3, [pc, #144]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b00:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f47f aeab 	bne.w	8000874 <HAL_GPIO_Init+0x10>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000c00 	.word	0x48000c00
 8000b3c:	48001000 	.word	0x48001000
 8000b40:	58000800 	.word	0x58000800

08000b44 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691a      	ldr	r2, [r3, #16]
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e001      	b.n	8000b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
 8000b80:	4613      	mov	r3, r2
 8000b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b84:	787b      	ldrb	r3, [r7, #1]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b90:	e002      	b.n	8000b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	58000400 	.word	0x58000400

08000bc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	58000400 	.word	0x58000400

08000be0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000bf2:	d101      	bne.n	8000bf8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000c52:	d101      	bne.n	8000c58 <LL_RCC_HSE_IsReady+0x18>
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <LL_RCC_HSE_IsReady+0x1a>
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb2:	d101      	bne.n	8000cb8 <LL_RCC_HSI_IsReady+0x18>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <LL_RCC_HSI_IsReady+0x1a>
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	061b      	lsls	r3, r3, #24
 8000cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	604b      	str	r3, [r1, #4]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000cfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d20:	f023 0301 	bic.w	r3, r3, #1
 8000d24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d101      	bne.n	8000d4a <LL_RCC_HSI48_IsReady+0x18>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <LL_RCC_HSI48_IsReady+0x1a>
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d88:	f023 0301 	bic.w	r3, r3, #1
 8000d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000dc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dcc:	f023 0304 	bic.w	r3, r3, #4
 8000dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d101      	bne.n	8000df6 <LL_RCC_LSE_IsReady+0x18>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <LL_RCC_LSE_IsReady+0x1a>
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e34:	f023 0301 	bic.w	r3, r3, #1
 8000e38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d101      	bne.n	8000e5e <LL_RCC_LSI1_IsReady+0x18>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <LL_RCC_LSI1_IsReady+0x1a>
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e9c:	f023 0304 	bic.w	r3, r3, #4
 8000ea0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d101      	bne.n	8000ec6 <LL_RCC_LSI2_IsReady+0x18>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <LL_RCC_LSI2_IsReady+0x1a>
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ee2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6013      	str	r3, [r2, #0]
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d101      	bne.n	8000f52 <LL_RCC_MSI_IsReady+0x16>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_RCC_MSI_IsReady+0x18>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f96:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2bb0      	cmp	r3, #176	@ 0xb0
 8000f9c:	d901      	bls.n	8000fa2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000f9e:	23b0      	movs	r3, #176	@ 0xb0
 8000fa0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f023 0203 	bic.w	r2, r3, #3
 8000fec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	608b      	str	r3, [r1, #8]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 030c 	and.w	r3, r3, #12
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800102c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4313      	orrs	r3, r2
 8001034:	608b      	str	r3, [r1, #8]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800104e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001052:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001056:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4313      	orrs	r3, r2
 800105e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800107a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800107e:	f023 020f 	bic.w	r2, r3, #15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80010d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4313      	orrs	r3, r2
 80010de:	608b      	str	r3, [r1, #8]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800110c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800112e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800114c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001150:	6013      	str	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800116e:	d101      	bne.n	8001174 <LL_RCC_PLL_IsReady+0x18>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <LL_RCC_PLL_IsReady+0x1a>
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80011b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0303 	and.w	r3, r3, #3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f4:	d101      	bne.n	80011fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800120e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800121a:	d101      	bne.n	8001220 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001234:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001240:	d101      	bne.n	8001246 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001264:	d101      	bne.n	800126a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001284:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001288:	d101      	bne.n	800128e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b08d      	sub	sp, #52	@ 0x34
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e363      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 808d 	beq.w	80013d6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012bc:	f7ff fea1 	bl	8001002 <LL_RCC_GetSysClkSource>
 80012c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c2:	f7ff ff82 	bl	80011ca <LL_RCC_PLL_GetMainSource>
 80012c6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80012c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x3e>
 80012ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d147      	bne.n	8001364 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80012d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d144      	bne.n	8001364 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e347      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80012ea:	f7ff fe4c 	bl	8000f86 <LL_RCC_MSI_GetRange>
 80012ee:	4603      	mov	r3, r0
 80012f0:	429c      	cmp	r4, r3
 80012f2:	d914      	bls.n	800131e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fd05 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e336      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe26 	bl	8000f5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe4a 	bl	8000fb0 <LL_RCC_MSI_SetCalibTrimming>
 800131c:	e013      	b.n	8001346 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe1b 	bl	8000f5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe3f 	bl	8000fb0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fce6 	bl	8001d08 <RCC_SetFlashLatencyFromMSIRange>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e317      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001346:	f000 fccb 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 800134a:	4603      	mov	r3, r0
 800134c:	4aa4      	ldr	r2, [pc, #656]	@ (80015e0 <HAL_RCC_OscConfig+0x344>)
 800134e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001350:	4ba4      	ldr	r3, [pc, #656]	@ (80015e4 <HAL_RCC_OscConfig+0x348>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f917 	bl	8000588 <HAL_InitTick>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d039      	beq.n	80013d4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e308      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01e      	beq.n	80013aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800136c:	f7ff fdc8 	bl	8000f00 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001370:	f7ff f958 	bl	8000624 <HAL_GetTick>
 8001374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001378:	f7ff f954 	bl	8000624 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e2f5      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800138a:	f7ff fdd7 	bl	8000f3c <LL_RCC_MSI_IsReady>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f1      	beq.n	8001378 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fde0 	bl	8000f5e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe04 	bl	8000fb0 <LL_RCC_MSI_SetCalibTrimming>
 80013a8:	e015      	b.n	80013d6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013aa:	f7ff fdb8 	bl	8000f1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ae:	f7ff f939 	bl	8000624 <HAL_GetTick>
 80013b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b6:	f7ff f935 	bl	8000624 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e2d6      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80013c8:	f7ff fdb8 	bl	8000f3c <LL_RCC_MSI_IsReady>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f1      	bne.n	80013b6 <HAL_RCC_OscConfig+0x11a>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80013d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d047      	beq.n	8001472 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e2:	f7ff fe0e 	bl	8001002 <LL_RCC_GetSysClkSource>
 80013e6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e8:	f7ff feef 	bl	80011ca <LL_RCC_PLL_GetMainSource>
 80013ec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x164>
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d108      	bne.n	800140c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d105      	bne.n	800140c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d134      	bne.n	8001472 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e2b4      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001414:	d102      	bne.n	800141c <HAL_RCC_OscConfig+0x180>
 8001416:	f7ff fbf5 	bl	8000c04 <LL_RCC_HSE_Enable>
 800141a:	e001      	b.n	8001420 <HAL_RCC_OscConfig+0x184>
 800141c:	f7ff fc01 	bl	8000c22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d012      	beq.n	800144e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff f8fc 	bl	8000624 <HAL_GetTick>
 800142c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff f8f8 	bl	8000624 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	@ 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e299      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001442:	f7ff fbfd 	bl	8000c40 <LL_RCC_HSE_IsReady>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f1      	beq.n	8001430 <HAL_RCC_OscConfig+0x194>
 800144c:	e011      	b.n	8001472 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff f8e9 	bl	8000624 <HAL_GetTick>
 8001452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff f8e5 	bl	8000624 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	@ 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e286      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001468:	f7ff fbea 	bl	8000c40 <LL_RCC_HSE_IsReady>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f1      	bne.n	8001456 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d04c      	beq.n	8001518 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147e:	f7ff fdc0 	bl	8001002 <LL_RCC_GetSysClkSource>
 8001482:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001484:	f7ff fea1 	bl	80011ca <LL_RCC_PLL_GetMainSource>
 8001488:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x200>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d10e      	bne.n	80014b4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d10b      	bne.n	80014b4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e266      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fc09 	bl	8000cc4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014b2:	e031      	b.n	8001518 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d019      	beq.n	80014f0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	f7ff fbd2 	bl	8000c64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff f8b0 	bl	8000624 <HAL_GetTick>
 80014c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff f8ac 	bl	8000624 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e24d      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80014da:	f7ff fbe1 	bl	8000ca0 <LL_RCC_HSI_IsReady>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f1      	beq.n	80014c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fbeb 	bl	8000cc4 <LL_RCC_HSI_SetCalibTrimming>
 80014ee:	e013      	b.n	8001518 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f0:	f7ff fbc7 	bl	8000c82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff f896 	bl	8000624 <HAL_GetTick>
 80014f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff f892 	bl	8000624 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e233      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800150e:	f7ff fbc7 	bl	8000ca0 <LL_RCC_HSI_IsReady>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f1      	bne.n	80014fc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a3 	beq.w	8001678 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d076      	beq.n	8001628 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d046      	beq.n	80015d4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001546:	f7ff fc7e 	bl	8000e46 <LL_RCC_LSI1_IsReady>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d113      	bne.n	8001578 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001550:	f7ff fc57 	bl	8000e02 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001554:	f7ff f866 	bl	8000624 <HAL_GetTick>
 8001558:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800155c:	f7ff f862 	bl	8000624 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e203      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800156e:	f7ff fc6a 	bl	8000e46 <LL_RCC_LSI1_IsReady>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f1      	beq.n	800155c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001578:	f7ff fc77 	bl	8000e6a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff f852 	bl	8000624 <HAL_GetTick>
 8001580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001584:	f7ff f84e 	bl	8000624 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b03      	cmp	r3, #3
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1ef      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001596:	f7ff fc8a 	bl	8000eae <LL_RCC_LSI2_IsReady>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f1      	beq.n	8001584 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fc94 	bl	8000ed2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80015aa:	f7ff fc3b 	bl	8000e24 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff f839 	bl	8000624 <HAL_GetTick>
 80015b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015b6:	f7ff f835 	bl	8000624 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1d6      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80015c8:	f7ff fc3d 	bl	8000e46 <LL_RCC_LSI1_IsReady>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f1      	bne.n	80015b6 <HAL_RCC_OscConfig+0x31a>
 80015d2:	e051      	b.n	8001678 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80015d4:	f7ff fc15 	bl	8000e02 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff f824 	bl	8000624 <HAL_GetTick>
 80015dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80015de:	e00c      	b.n	80015fa <HAL_RCC_OscConfig+0x35e>
 80015e0:	20000008 	.word	0x20000008
 80015e4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015e8:	f7ff f81c 	bl	8000624 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1bd      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80015fa:	f7ff fc24 	bl	8000e46 <LL_RCC_LSI1_IsReady>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f1      	beq.n	80015e8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001604:	f7ff fc42 	bl	8000e8c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800160a:	f7ff f80b 	bl	8000624 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1ac      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800161c:	f7ff fc47 	bl	8000eae <LL_RCC_LSI2_IsReady>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f1      	bne.n	800160a <HAL_RCC_OscConfig+0x36e>
 8001626:	e027      	b.n	8001678 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001628:	f7ff fc30 	bl	8000e8c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7fe fffa 	bl	8000624 <HAL_GetTick>
 8001630:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001634:	f7fe fff6 	bl	8000624 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b03      	cmp	r3, #3
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e197      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001646:	f7ff fc32 	bl	8000eae <LL_RCC_LSI2_IsReady>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f1      	bne.n	8001634 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001650:	f7ff fbe8 	bl	8000e24 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7fe ffe6 	bl	8000624 <HAL_GetTick>
 8001658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800165c:	f7fe ffe2 	bl	8000624 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e183      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800166e:	f7ff fbea 	bl	8000e46 <LL_RCC_LSI1_IsReady>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f1      	bne.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05b      	beq.n	800173c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	4ba7      	ldr	r3, [pc, #668]	@ (8001924 <HAL_RCC_OscConfig+0x688>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d114      	bne.n	80016ba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001690:	f7ff fa88 	bl	8000ba4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001694:	f7fe ffc6 	bl	8000624 <HAL_GetTick>
 8001698:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7fe ffc2 	bl	8000624 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e163      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ae:	4b9d      	ldr	r3, [pc, #628]	@ (8001924 <HAL_RCC_OscConfig+0x688>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_RCC_OscConfig+0x42c>
 80016c2:	f7ff fb48 	bl	8000d56 <LL_RCC_LSE_Enable>
 80016c6:	e00c      	b.n	80016e2 <HAL_RCC_OscConfig+0x446>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d104      	bne.n	80016da <HAL_RCC_OscConfig+0x43e>
 80016d0:	f7ff fb63 	bl	8000d9a <LL_RCC_LSE_EnableBypass>
 80016d4:	f7ff fb3f 	bl	8000d56 <LL_RCC_LSE_Enable>
 80016d8:	e003      	b.n	80016e2 <HAL_RCC_OscConfig+0x446>
 80016da:	f7ff fb4d 	bl	8000d78 <LL_RCC_LSE_Disable>
 80016de:	f7ff fb6d 	bl	8000dbc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d014      	beq.n	8001714 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7fe ff9b 	bl	8000624 <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7fe ff97 	bl	8000624 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e136      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001708:	f7ff fb69 	bl	8000dde <LL_RCC_LSE_IsReady>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ef      	beq.n	80016f2 <HAL_RCC_OscConfig+0x456>
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7fe ff86 	bl	8000624 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7fe ff82 	bl	8000624 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e121      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001732:	f7ff fb54 	bl	8000dde <LL_RCC_LSE_IsReady>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ef      	bne.n	800171c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d02c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d014      	beq.n	800177a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001750:	f7ff facd 	bl	8000cee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7fe ff66 	bl	8000624 <HAL_GetTick>
 8001758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175c:	f7fe ff62 	bl	8000624 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e103      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800176e:	f7ff fae0 	bl	8000d32 <LL_RCC_HSI48_IsReady>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f1      	beq.n	800175c <HAL_RCC_OscConfig+0x4c0>
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800177a:	f7ff fac9 	bl	8000d10 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7fe ff51 	bl	8000624 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001786:	f7fe ff4d 	bl	8000624 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0ee      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001798:	f7ff facb 	bl	8000d32 <LL_RCC_HSI48_IsReady>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f1      	bne.n	8001786 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80e4 	beq.w	8001974 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ac:	f7ff fc29 	bl	8001002 <LL_RCC_GetSysClkSource>
 80017b0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017be:	2b02      	cmp	r3, #2
 80017c0:	f040 80b4 	bne.w	800192c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0203 	and.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d123      	bne.n	800181a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d11c      	bne.n	800181a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d114      	bne.n	800181a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d10d      	bne.n	800181a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d05d      	beq.n	80018d6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d058      	beq.n	80018d2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0a1      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001832:	f7ff fc84 	bl	800113e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001836:	f7fe fef5 	bl	8000624 <HAL_GetTick>
 800183a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe fef1 	bl	8000624 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e092      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ef      	bne.n	800183e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <HAL_RCC_OscConfig+0x68c>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001876:	0212      	lsls	r2, r2, #8
 8001878:	4311      	orrs	r1, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001884:	4311      	orrs	r1, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800188a:	430a      	orrs	r2, r1
 800188c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001890:	4313      	orrs	r3, r2
 8001892:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001894:	f7ff fc44 	bl	8001120 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a8:	f7fe febc 	bl	8000624 <HAL_GetTick>
 80018ac:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7fe feb8 	bl	8000624 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e059      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ef      	beq.n	80018b0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	e050      	b.n	8001974 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e04f      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d147      	bne.n	8001974 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018e4:	f7ff fc1c 	bl	8001120 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018f8:	f7fe fe94 	bl	8000624 <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7fe fe90 	bl	8000624 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e031      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ef      	beq.n	8001900 <HAL_RCC_OscConfig+0x664>
 8001920:	e028      	b.n	8001974 <HAL_RCC_OscConfig+0x6d8>
 8001922:	bf00      	nop
 8001924:	58000400 	.word	0x58000400
 8001928:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d01e      	beq.n	8001970 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	f7ff fc04 	bl	800113e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7fe fe75 	bl	8000624 <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7fe fe71 	bl	8000624 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e012      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ef      	bne.n	800193e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_OscConfig+0x6e4>)
 800196a:	4013      	ands	r3, r2
 800196c:	60cb      	str	r3, [r1, #12]
 800196e:	e001      	b.n	8001974 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3734      	adds	r7, #52	@ 0x34
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	eefefffc 	.word	0xeefefffc

08001984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e12d      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b98      	ldr	r3, [pc, #608]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d91b      	bls.n	80019de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b95      	ldr	r3, [pc, #596]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 0207 	bic.w	r2, r3, #7
 80019ae:	4993      	ldr	r1, [pc, #588]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b6:	f7fe fe35 	bl	8000624 <HAL_GetTick>
 80019ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80019be:	f7fe fe31 	bl	8000624 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e111      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d0:	4b8a      	ldr	r3, [pc, #552]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d016      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb13 	bl	800101a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019f4:	f7fe fe16 	bl	8000624 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019fc:	f7fe fe12 	bl	8000624 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0f2      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a0e:	f7ff fbe8 	bl	80011e2 <LL_RCC_IsActiveFlag_HPRE>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f1      	beq.n	80019fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d016      	beq.n	8001a52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fb0a 	bl	8001042 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a2e:	f7fe fdf9 	bl	8000624 <HAL_GetTick>
 8001a32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a36:	f7fe fdf5 	bl	8000624 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0d5      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a48:	f7ff fbdd 	bl	8001206 <LL_RCC_IsActiveFlag_C2HPRE>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f1      	beq.n	8001a36 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d016      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fb03 	bl	800106e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a68:	f7fe fddc 	bl	8000624 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a70:	f7fe fdd8 	bl	8000624 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0b8      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a82:	f7ff fbd3 	bl	800122c <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f1      	beq.n	8001a70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d016      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fafd 	bl	800109c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001aa2:	f7fe fdbf 	bl	8000624 <HAL_GetTick>
 8001aa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aaa:	f7fe fdbb 	bl	8000624 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e09b      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001abc:	f7ff fbc9 	bl	8001252 <LL_RCC_IsActiveFlag_PPRE1>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f1      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d017      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff faf3 	bl	80010c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ade:	f7fe fda1 	bl	8000624 <HAL_GetTick>
 8001ae2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ae6:	f7fe fd9d 	bl	8000624 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e07d      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001af8:	f7ff fbbd 	bl	8001276 <LL_RCC_IsActiveFlag_PPRE2>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f1      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d043      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b16:	f7ff f893 	bl	8000c40 <LL_RCC_HSE_IsReady>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d11e      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e067      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b2c:	f7ff fb16 	bl	800115c <LL_RCC_PLL_IsReady>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d113      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e05c      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b42:	f7ff f9fb 	bl	8000f3c <LL_RCC_MSI_IsReady>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d108      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e051      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b50:	f7ff f8a6 	bl	8000ca0 <LL_RCC_HSI_IsReady>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e04a      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fa39 	bl	8000fda <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b68:	f7fe fd5c 	bl	8000624 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7fe fd58 	bl	8000624 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e036      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	f7ff fa3c 	bl	8001002 <LL_RCC_GetSysClkSource>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d1ec      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d21b      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 0207 	bic.w	r2, r3, #7
 8001bac:	4913      	ldr	r1, [pc, #76]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb4:	f7fe fd36 	bl	8000624 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bbc:	f7fe fd32 	bl	8000624 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e012      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1ef      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bdc:	f000 f880 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_RCC_ClockConfig+0x27c>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001be6:	f7fe fd29 	bl	800063c <HAL_GetTickPrio>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fccb 	bl	8000588 <HAL_InitTick>
 8001bf2:	4603      	mov	r3, r0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	58004000 	.word	0x58004000
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0a:	f7ff f9fa 	bl	8001002 <LL_RCC_GetSysClkSource>
 8001c0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10a      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c16:	f7ff f9b6 	bl	8000f86 <LL_RCC_MSI_GetRange>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e04b      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c32:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e045      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d10a      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c3e:	f7fe ffcf 	bl	8000be0 <LL_RCC_HSE_IsEnabledDiv2>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c48:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e03a      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e037      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c54:	f7ff fab9 	bl	80011ca <LL_RCC_PLL_GetMainSource>
 8001c58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d003      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x64>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x6a>
 8001c66:	e00d      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c6a:	60bb      	str	r3, [r7, #8]
        break;
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c6e:	f7fe ffb7 	bl	8000be0 <LL_RCC_HSE_IsEnabledDiv2>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c78:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c7a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c7c:	e00d      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c80:	60bb      	str	r3, [r7, #8]
        break;
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c84:	f7ff f97f 	bl	8000f86 <LL_RCC_MSI_GetRange>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	60bb      	str	r3, [r7, #8]
        break;
 8001c98:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001c9a:	f7ff fa71 	bl	8001180 <LL_RCC_PLL_GetN>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	fb03 f402 	mul.w	r4, r3, r2
 8001ca6:	f7ff fa84 	bl	80011b2 <LL_RCC_PLL_GetDivider>
 8001caa:	4603      	mov	r3, r0
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	3301      	adds	r3, #1
 8001cb0:	fbb4 f4f3 	udiv	r4, r4, r3
 8001cb4:	f7ff fa71 	bl	800119a <LL_RCC_PLL_GetR>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	0f5b      	lsrs	r3, r3, #29
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	fbb4 f3f3 	udiv	r3, r4, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	08002794 	.word	0x08002794
 8001cd4:	00f42400 	.word	0x00f42400
 8001cd8:	003d0900 	.word	0x003d0900
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b598      	push	{r3, r4, r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ce4:	f7ff ff8e 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	f7ff f9ff 	bl	80010ec <LL_RCC_GetAHBPrescaler>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a03      	ldr	r2, [pc, #12]	@ (8001d04 <HAL_RCC_GetHCLKFreq+0x24>)
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd98      	pop	{r3, r4, r7, pc}
 8001d04:	08002754 	.word	0x08002754

08001d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2bb0      	cmp	r3, #176	@ 0xb0
 8001d14:	d903      	bls.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e007      	b.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001d2e:	f7ff f9e9 	bl	8001104 <LL_RCC_GetAHB4Prescaler>
 8001d32:	4603      	mov	r3, r0
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9c      	lsrs	r4, r3, #18
 8001d52:	f7fe ff37 	bl	8000bc4 <HAL_PWREx_GetVoltageRange>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f000 f80c 	bl	8001d78 <RCC_SetFlashLatency>
 8001d60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08002794 	.word	0x08002794
 8001d70:	08002754 	.word	0x08002754
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b093      	sub	sp, #76	@ 0x4c
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001d82:	4b37      	ldr	r3, [pc, #220]	@ (8001e60 <RCC_SetFlashLatency+0xe8>)
 8001d84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001d8e:	4a35      	ldr	r2, [pc, #212]	@ (8001e64 <RCC_SetFlashLatency+0xec>)
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <RCC_SetFlashLatency+0xf0>)
 8001d9c:	f107 040c 	add.w	r4, r7, #12
 8001da0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001da6:	2300      	movs	r3, #0
 8001da8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db0:	d11a      	bne.n	8001de8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001db6:	e013      	b.n	8001de0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3348      	adds	r3, #72	@ 0x48
 8001dbe:	443b      	add	r3, r7
 8001dc0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d807      	bhi.n	8001dda <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3348      	adds	r3, #72	@ 0x48
 8001dd0:	443b      	add	r3, r7
 8001dd2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001dd6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001dd8:	e020      	b.n	8001e1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ddc:	3301      	adds	r3, #1
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8001de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d9e8      	bls.n	8001db8 <RCC_SetFlashLatency+0x40>
 8001de6:	e019      	b.n	8001e1c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dec:	e013      	b.n	8001e16 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	3348      	adds	r3, #72	@ 0x48
 8001df4:	443b      	add	r3, r7
 8001df6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d807      	bhi.n	8001e10 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	3348      	adds	r3, #72	@ 0x48
 8001e06:	443b      	add	r3, r7
 8001e08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e0c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001e0e:	e005      	b.n	8001e1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e12:	3301      	adds	r3, #1
 8001e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d9e8      	bls.n	8001dee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <RCC_SetFlashLatency+0xf4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 0207 	bic.w	r2, r3, #7
 8001e24:	4911      	ldr	r1, [pc, #68]	@ (8001e6c <RCC_SetFlashLatency+0xf4>)
 8001e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e2c:	f7fe fbfa 	bl	8000624 <HAL_GetTick>
 8001e30:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e32:	e008      	b.n	8001e46 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e34:	f7fe fbf6 	bl	8000624 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e007      	b.n	8001e56 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <RCC_SetFlashLatency+0xf4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1ef      	bne.n	8001e34 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	374c      	adds	r7, #76	@ 0x4c
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	08002728 	.word	0x08002728
 8001e64:	08002738 	.word	0x08002738
 8001e68:	08002744 	.word	0x08002744
 8001e6c:	58004000 	.word	0x58004000

08001e70 <LL_RCC_LSE_IsEnabled>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <LL_RCC_LSE_IsEnabled+0x18>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <LL_RCC_LSE_IsEnabled+0x1a>
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_RCC_LSE_IsReady>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d101      	bne.n	8001eac <LL_RCC_LSE_IsReady+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_RCC_LSE_IsReady+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_RCC_SetRFWKPClockSource>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_SetSMPSClockSource>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_SetSMPSPrescaler>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_SetUSARTClockSource>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f44:	f023 0203 	bic.w	r2, r3, #3
 8001f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_RCC_SetLPUARTClockSource>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_RCC_SetI2CClockSource>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_SetLPTIMClockSource>:
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_SetSAIClockSource>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800200e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_SetRNGClockSource>:
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800203a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_RCC_SetCLK48ClockSource>:
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_RCC_SetUSBClockSource>:
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffe3 	bl	8002052 <LL_RCC_SetCLK48ClockSource>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <LL_RCC_SetADCClockSource>:
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80020a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_SetRTCClockSource>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_RCC_GetRTCClockSource>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_RCC_ForceBackupDomainReset>:
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002134:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_RCC_PLLSAI1_Enable>:
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002158:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_RCC_PLLSAI1_Disable>:
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_PLLSAI1_IsReady>:
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002198:	d101      	bne.n	800219e <LL_RCC_PLLSAI1_IsReady+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b088      	sub	sp, #32
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80021b2:	2300      	movs	r3, #0
 80021b4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80021b6:	2300      	movs	r3, #0
 80021b8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d034      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021ce:	d021      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80021d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021d4:	d81b      	bhi.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021da:	d01d      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80021dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021e0:	d815      	bhi.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x54>
 80021e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ea:	d110      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80021fc:	e00d      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f947 	bl	8002496 <RCCEx_PLLSAI1_ConfigNP>
 8002208:	4603      	mov	r3, r0
 800220a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800220c:	e005      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	77fb      	strb	r3, [r7, #31]
        break;
 8002212:	e002      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002214:	bf00      	nop
 8002216:	e000      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fee8 	bl	8001ffa <LL_RCC_SetSAIClockSource>
 800222a:	e001      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7ffb      	ldrb	r3, [r7, #31]
 800222e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002238:	2b00      	cmp	r3, #0
 800223a:	d046      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800223c:	f7ff ff56 	bl	80020ec <LL_RCC_GetRTCClockSource>
 8002240:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	429a      	cmp	r2, r3
 800224a:	d03c      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800224c:	f7fe fcaa 	bl	8000ba4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff30 	bl	80020c0 <LL_RCC_SetRTCClockSource>
 8002260:	e02e      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800226c:	f7ff ff4b 	bl	8002106 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002270:	f7ff ff5a 	bl	8002128 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002282:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800228c:	f7ff fdf0 	bl	8001e70 <LL_RCC_LSE_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d114      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002296:	f7fe f9c5 	bl	8000624 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800229c:	e00b      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe f9c1 	bl	8000624 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d902      	bls.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	77fb      	strb	r3, [r7, #31]
              break;
 80022b4:	e004      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80022b6:	f7ff fded 	bl	8001e94 <LL_RCC_LSE_IsReady>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d1ee      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80022c0:	7ffb      	ldrb	r3, [r7, #31]
 80022c2:	77bb      	strb	r3, [r7, #30]
 80022c4:	e001      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
 80022c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fe2a 	bl	8001f34 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fe35 	bl	8001f60 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fe5d 	bl	8001fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fe52 	bl	8001fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fe2a 	bl	8001f8c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fe1f 	bl	8001f8c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d022      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe8d 	bl	800207e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800236c:	d107      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800237c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002382:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002386:	d10b      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f8dd 	bl	800254c <RCCEx_PLLSAI1_ConfigNQ>
 8002392:	4603      	mov	r3, r0
 8002394:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002396:	7ffb      	ldrb	r3, [r7, #31]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800239c:	7ffb      	ldrb	r3, [r7, #31]
 800239e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02b      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b4:	d008      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023be:	d003      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fe2a 	bl	8002026 <LL_RCC_SetRNGClockSource>
 80023d2:	e00a      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff fe21 	bl	8002026 <LL_RCC_SetRNGClockSource>
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff fe34 	bl	8002052 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80023f2:	d107      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d022      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe3d 	bl	8002094 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002422:	d107      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800242e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002432:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800243c:	d10b      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f8dd 	bl	8002602 <RCCEx_PLLSAI1_ConfigNR>
 8002448:	4603      	mov	r3, r0
 800244a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800244c:	7ffb      	ldrb	r3, [r7, #31]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002452:	7ffb      	ldrb	r3, [r7, #31]
 8002454:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fd26 	bl	8001eb8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fd45 	bl	8001f0c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd2c 	bl	8001ee4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800248c:	7fbb      	ldrb	r3, [r7, #30]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80024a2:	f7ff fe61 	bl	8002168 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024a6:	f7fe f8bd 	bl	8000624 <HAL_GetTick>
 80024aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024ac:	e009      	b.n	80024c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ae:	f7fe f8b9 	bl	8000624 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d902      	bls.n	80024c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e004      	b.n	80024cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024c2:	f7ff fe60 	bl	8002186 <LL_RCC_PLLSAI1_IsReady>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d137      	bne.n	8002542 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024e6:	4313      	orrs	r3, r2
 80024e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024fc:	4313      	orrs	r3, r2
 80024fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002500:	f7ff fe23 	bl	800214a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002504:	f7fe f88e 	bl	8000624 <HAL_GetTick>
 8002508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800250a:	e009      	b.n	8002520 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800250c:	f7fe f88a 	bl	8000624 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d902      	bls.n	8002520 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	73fb      	strb	r3, [r7, #15]
        break;
 800251e:	e004      	b.n	800252a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002520:	f7ff fe31 	bl	8002186 <LL_RCC_PLLSAI1_IsReady>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d1f0      	bne.n	800250c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d108      	bne.n	8002542 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800253e:	4313      	orrs	r3, r2
 8002540:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002558:	f7ff fe06 	bl	8002168 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800255c:	f7fe f862 	bl	8000624 <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002562:	e009      	b.n	8002578 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002564:	f7fe f85e 	bl	8000624 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d902      	bls.n	8002578 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	73fb      	strb	r3, [r7, #15]
      break;
 8002576:	e004      	b.n	8002582 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002578:	f7ff fe05 	bl	8002186 <LL_RCC_PLLSAI1_IsReady>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d137      	bne.n	80025f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800259c:	4313      	orrs	r3, r2
 800259e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025b2:	4313      	orrs	r3, r2
 80025b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80025b6:	f7ff fdc8 	bl	800214a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ba:	f7fe f833 	bl	8000624 <HAL_GetTick>
 80025be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80025c0:	e009      	b.n	80025d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025c2:	f7fe f82f 	bl	8000624 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d902      	bls.n	80025d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	73fb      	strb	r3, [r7, #15]
        break;
 80025d4:	e004      	b.n	80025e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80025d6:	f7ff fdd6 	bl	8002186 <LL_RCC_PLLSAI1_IsReady>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d1f0      	bne.n	80025c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80025e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025f4:	4313      	orrs	r3, r2
 80025f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800260e:	f7ff fdab 	bl	8002168 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002612:	f7fe f807 	bl	8000624 <HAL_GetTick>
 8002616:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002618:	e009      	b.n	800262e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800261a:	f7fe f803 	bl	8000624 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d902      	bls.n	800262e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	e004      	b.n	8002638 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800262e:	f7ff fdaa 	bl	8002186 <LL_RCC_PLLSAI1_IsReady>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d137      	bne.n	80026ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800263e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002652:	4313      	orrs	r3, r2
 8002654:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002668:	4313      	orrs	r3, r2
 800266a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800266c:	f7ff fd6d 	bl	800214a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002670:	f7fd ffd8 	bl	8000624 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002676:	e009      	b.n	800268c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002678:	f7fd ffd4 	bl	8000624 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d902      	bls.n	800268c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	73fb      	strb	r3, [r7, #15]
        break;
 800268a:	e004      	b.n	8002696 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800268c:	f7ff fd7b 	bl	8002186 <LL_RCC_PLLSAI1_IsReady>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d1f0      	bne.n	8002678 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d108      	bne.n	80026ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026aa:	4313      	orrs	r3, r2
 80026ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <memset>:
 80026b8:	4402      	add	r2, r0
 80026ba:	4603      	mov	r3, r0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d100      	bne.n	80026c2 <memset+0xa>
 80026c0:	4770      	bx	lr
 80026c2:	f803 1b01 	strb.w	r1, [r3], #1
 80026c6:	e7f9      	b.n	80026bc <memset+0x4>

080026c8 <__libc_init_array>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	4d0d      	ldr	r5, [pc, #52]	@ (8002700 <__libc_init_array+0x38>)
 80026cc:	4c0d      	ldr	r4, [pc, #52]	@ (8002704 <__libc_init_array+0x3c>)
 80026ce:	1b64      	subs	r4, r4, r5
 80026d0:	10a4      	asrs	r4, r4, #2
 80026d2:	2600      	movs	r6, #0
 80026d4:	42a6      	cmp	r6, r4
 80026d6:	d109      	bne.n	80026ec <__libc_init_array+0x24>
 80026d8:	4d0b      	ldr	r5, [pc, #44]	@ (8002708 <__libc_init_array+0x40>)
 80026da:	4c0c      	ldr	r4, [pc, #48]	@ (800270c <__libc_init_array+0x44>)
 80026dc:	f000 f818 	bl	8002710 <_init>
 80026e0:	1b64      	subs	r4, r4, r5
 80026e2:	10a4      	asrs	r4, r4, #2
 80026e4:	2600      	movs	r6, #0
 80026e6:	42a6      	cmp	r6, r4
 80026e8:	d105      	bne.n	80026f6 <__libc_init_array+0x2e>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f0:	4798      	blx	r3
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7ee      	b.n	80026d4 <__libc_init_array+0xc>
 80026f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fa:	4798      	blx	r3
 80026fc:	3601      	adds	r6, #1
 80026fe:	e7f2      	b.n	80026e6 <__libc_init_array+0x1e>
 8002700:	080027d4 	.word	0x080027d4
 8002704:	080027d4 	.word	0x080027d4
 8002708:	080027d4 	.word	0x080027d4
 800270c:	080027d8 	.word	0x080027d8

08002710 <_init>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr

0800271c <_fini>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	bf00      	nop
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr
